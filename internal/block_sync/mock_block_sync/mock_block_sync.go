// Code generated by MockGen. DO NOT EDIT.
// Source: block_sync.go
//
// Generated by this command:
//
//	mockgen -destination mock_block_sync/mock_block_sync.go -package mock_block_sync -source block_sync.go
//

// Package mock_block_sync is a generated GoMock package.
package mock_block_sync

import (
	reflect "reflect"

	consensus "github.com/axiomesh/axiom-bft/common/consensus"
	types "github.com/axiomesh/axiom-kit/types"
	gomock "go.uber.org/mock/gomock"
)

// MockSync is a mock of Sync interface.
type MockSync struct {
	ctrl     *gomock.Controller
	recorder *MockSyncMockRecorder
}

// MockSyncMockRecorder is the mock recorder for MockSync.
type MockSyncMockRecorder struct {
	mock *MockSync
}

// NewMockSync creates a new mock instance.
func NewMockSync(ctrl *gomock.Controller) *MockSync {
	mock := &MockSync{ctrl: ctrl}
	mock.recorder = &MockSyncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSync) EXPECT() *MockSyncMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockSync) Commit() chan []*types.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(chan []*types.Block)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockSyncMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockSync)(nil).Commit))
}

// Start mocks base method.
func (m *MockSync) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockSyncMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSync)(nil).Start))
}

// StartSync mocks base method.
func (m *MockSync) StartSync(peers []string, curBlockHash string, quorum, curHeight, targetHeight uint64, quorumCheckpoint *consensus.SignedCheckpoint, epc ...*consensus.EpochChange) error {
	m.ctrl.T.Helper()
	varargs := []any{peers, curBlockHash, quorum, curHeight, targetHeight, quorumCheckpoint}
	for _, a := range epc {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartSync", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartSync indicates an expected call of StartSync.
func (mr *MockSyncMockRecorder) StartSync(peers, curBlockHash, quorum, curHeight, targetHeight, quorumCheckpoint any, epc ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{peers, curBlockHash, quorum, curHeight, targetHeight, quorumCheckpoint}, epc...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSync", reflect.TypeOf((*MockSync)(nil).StartSync), varargs...)
}

// Stop mocks base method.
func (m *MockSync) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockSyncMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockSync)(nil).Stop))
}
