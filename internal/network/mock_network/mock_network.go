// Code generated by MockGen. DO NOT EDIT.
// Source: network.go
//
// Generated by this command:
//
//	mockgen -destination mock_network/mock_network.go -package mock_network -source network.go -typed
//

// Package mock_network is a generated GoMock package.
package mock_network

import (
	context "context"
	reflect "reflect"

	pb "github.com/axiomesh/axiom-kit/types/pb"
	network "github.com/axiomesh/axiom-p2p"
	gomock "go.uber.org/mock/gomock"
)

// MockPipe is a mock of Pipe interface.
type MockPipe struct {
	ctrl     *gomock.Controller
	recorder *MockPipeMockRecorder
}

// MockPipeMockRecorder is the mock recorder for MockPipe.
type MockPipeMockRecorder struct {
	mock *MockPipe
}

// NewMockPipe creates a new mock instance.
func NewMockPipe(ctrl *gomock.Controller) *MockPipe {
	mock := &MockPipe{ctrl: ctrl}
	mock.recorder = &MockPipeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipe) EXPECT() *MockPipeMockRecorder {
	return m.recorder
}

// Broadcast mocks base method.
func (m *MockPipe) Broadcast(ctx context.Context, targets []string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Broadcast", ctx, targets, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockPipeMockRecorder) Broadcast(ctx, targets, data any) *PipeBroadcastCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockPipe)(nil).Broadcast), ctx, targets, data)
	return &PipeBroadcastCall{Call: call}
}

// PipeBroadcastCall wrap *gomock.Call
type PipeBroadcastCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PipeBroadcastCall) Return(arg0 error) *PipeBroadcastCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PipeBroadcastCall) Do(f func(context.Context, []string, []byte) error) *PipeBroadcastCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PipeBroadcastCall) DoAndReturn(f func(context.Context, []string, []byte) error) *PipeBroadcastCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Receive mocks base method.
func (m *MockPipe) Receive(ctx context.Context) *network.PipeMsg {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", ctx)
	ret0, _ := ret[0].(*network.PipeMsg)
	return ret0
}

// Receive indicates an expected call of Receive.
func (mr *MockPipeMockRecorder) Receive(ctx any) *PipeReceiveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockPipe)(nil).Receive), ctx)
	return &PipeReceiveCall{Call: call}
}

// PipeReceiveCall wrap *gomock.Call
type PipeReceiveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PipeReceiveCall) Return(arg0 *network.PipeMsg) *PipeReceiveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PipeReceiveCall) Do(f func(context.Context) *network.PipeMsg) *PipeReceiveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PipeReceiveCall) DoAndReturn(f func(context.Context) *network.PipeMsg) *PipeReceiveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Send mocks base method.
func (m *MockPipe) Send(ctx context.Context, to string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, to, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPipeMockRecorder) Send(ctx, to, data any) *PipeSendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPipe)(nil).Send), ctx, to, data)
	return &PipeSendCall{Call: call}
}

// PipeSendCall wrap *gomock.Call
type PipeSendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PipeSendCall) Return(arg0 error) *PipeSendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PipeSendCall) Do(f func(context.Context, string, []byte) error) *PipeSendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PipeSendCall) DoAndReturn(f func(context.Context, string, []byte) error) *PipeSendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// String mocks base method.
func (m *MockPipe) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockPipeMockRecorder) String() *PipeStringCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockPipe)(nil).String))
	return &PipeStringCall{Call: call}
}

// PipeStringCall wrap *gomock.Call
type PipeStringCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PipeStringCall) Return(arg0 string) *PipeStringCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PipeStringCall) Do(f func() string) *PipeStringCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PipeStringCall) DoAndReturn(f func() string) *PipeStringCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNetwork is a mock of Network interface.
type MockNetwork struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkMockRecorder
}

// MockNetworkMockRecorder is the mock recorder for MockNetwork.
type MockNetworkMockRecorder struct {
	mock *MockNetwork
}

// NewMockNetwork creates a new mock instance.
func NewMockNetwork(ctrl *gomock.Controller) *MockNetwork {
	mock := &MockNetwork{ctrl: ctrl}
	mock.recorder = &MockNetworkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetwork) EXPECT() *MockNetworkMockRecorder {
	return m.recorder
}

// CountConnectedPeers mocks base method.
func (m *MockNetwork) CountConnectedPeers() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountConnectedPeers")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// CountConnectedPeers indicates an expected call of CountConnectedPeers.
func (mr *MockNetworkMockRecorder) CountConnectedPeers() *NetworkCountConnectedPeersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountConnectedPeers", reflect.TypeOf((*MockNetwork)(nil).CountConnectedPeers))
	return &NetworkCountConnectedPeersCall{Call: call}
}

// NetworkCountConnectedPeersCall wrap *gomock.Call
type NetworkCountConnectedPeersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *NetworkCountConnectedPeersCall) Return(arg0 uint64) *NetworkCountConnectedPeersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *NetworkCountConnectedPeersCall) Do(f func() uint64) *NetworkCountConnectedPeersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *NetworkCountConnectedPeersCall) DoAndReturn(f func() uint64) *NetworkCountConnectedPeersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreatePipe mocks base method.
func (m *MockNetwork) CreatePipe(ctx context.Context, pipeID string) (network.Pipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipe", ctx, pipeID)
	ret0, _ := ret[0].(network.Pipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePipe indicates an expected call of CreatePipe.
func (mr *MockNetworkMockRecorder) CreatePipe(ctx, pipeID any) *NetworkCreatePipeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipe", reflect.TypeOf((*MockNetwork)(nil).CreatePipe), ctx, pipeID)
	return &NetworkCreatePipeCall{Call: call}
}

// NetworkCreatePipeCall wrap *gomock.Call
type NetworkCreatePipeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *NetworkCreatePipeCall) Return(arg0 network.Pipe, arg1 error) *NetworkCreatePipeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *NetworkCreatePipeCall) Do(f func(context.Context, string) (network.Pipe, error)) *NetworkCreatePipeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *NetworkCreatePipeCall) DoAndReturn(f func(context.Context, string) (network.Pipe, error)) *NetworkCreatePipeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PeerID mocks base method.
func (m *MockNetwork) PeerID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeerID")
	ret0, _ := ret[0].(string)
	return ret0
}

// PeerID indicates an expected call of PeerID.
func (mr *MockNetworkMockRecorder) PeerID() *NetworkPeerIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeerID", reflect.TypeOf((*MockNetwork)(nil).PeerID))
	return &NetworkPeerIDCall{Call: call}
}

// NetworkPeerIDCall wrap *gomock.Call
type NetworkPeerIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *NetworkPeerIDCall) Return(arg0 string) *NetworkPeerIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *NetworkPeerIDCall) Do(f func() string) *NetworkPeerIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *NetworkPeerIDCall) DoAndReturn(f func() string) *NetworkPeerIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RegisterMsgHandler mocks base method.
func (m *MockNetwork) RegisterMsgHandler(messageType pb.Message_Type, handler func(network.Stream, *pb.Message)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterMsgHandler", messageType, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterMsgHandler indicates an expected call of RegisterMsgHandler.
func (mr *MockNetworkMockRecorder) RegisterMsgHandler(messageType, handler any) *NetworkRegisterMsgHandlerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMsgHandler", reflect.TypeOf((*MockNetwork)(nil).RegisterMsgHandler), messageType, handler)
	return &NetworkRegisterMsgHandlerCall{Call: call}
}

// NetworkRegisterMsgHandlerCall wrap *gomock.Call
type NetworkRegisterMsgHandlerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *NetworkRegisterMsgHandlerCall) Return(arg0 error) *NetworkRegisterMsgHandlerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *NetworkRegisterMsgHandlerCall) Do(f func(pb.Message_Type, func(network.Stream, *pb.Message)) error) *NetworkRegisterMsgHandlerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *NetworkRegisterMsgHandlerCall) DoAndReturn(f func(pb.Message_Type, func(network.Stream, *pb.Message)) error) *NetworkRegisterMsgHandlerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RegisterMultiMsgHandler mocks base method.
func (m *MockNetwork) RegisterMultiMsgHandler(messageTypes []pb.Message_Type, handler func(network.Stream, *pb.Message)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterMultiMsgHandler", messageTypes, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterMultiMsgHandler indicates an expected call of RegisterMultiMsgHandler.
func (mr *MockNetworkMockRecorder) RegisterMultiMsgHandler(messageTypes, handler any) *NetworkRegisterMultiMsgHandlerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMultiMsgHandler", reflect.TypeOf((*MockNetwork)(nil).RegisterMultiMsgHandler), messageTypes, handler)
	return &NetworkRegisterMultiMsgHandlerCall{Call: call}
}

// NetworkRegisterMultiMsgHandlerCall wrap *gomock.Call
type NetworkRegisterMultiMsgHandlerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *NetworkRegisterMultiMsgHandlerCall) Return(arg0 error) *NetworkRegisterMultiMsgHandlerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *NetworkRegisterMultiMsgHandlerCall) Do(f func([]pb.Message_Type, func(network.Stream, *pb.Message)) error) *NetworkRegisterMultiMsgHandlerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *NetworkRegisterMultiMsgHandlerCall) DoAndReturn(f func([]pb.Message_Type, func(network.Stream, *pb.Message)) error) *NetworkRegisterMultiMsgHandlerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Send mocks base method.
func (m *MockNetwork) Send(arg0 string, arg1 *pb.Message) (*pb.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(*pb.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockNetworkMockRecorder) Send(arg0, arg1 any) *NetworkSendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNetwork)(nil).Send), arg0, arg1)
	return &NetworkSendCall{Call: call}
}

// NetworkSendCall wrap *gomock.Call
type NetworkSendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *NetworkSendCall) Return(arg0 *pb.Message, arg1 error) *NetworkSendCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *NetworkSendCall) Do(f func(string, *pb.Message) (*pb.Message, error)) *NetworkSendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *NetworkSendCall) DoAndReturn(f func(string, *pb.Message) (*pb.Message, error)) *NetworkSendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendWithStream mocks base method.
func (m *MockNetwork) SendWithStream(arg0 network.Stream, arg1 *pb.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWithStream", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendWithStream indicates an expected call of SendWithStream.
func (mr *MockNetworkMockRecorder) SendWithStream(arg0, arg1 any) *NetworkSendWithStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWithStream", reflect.TypeOf((*MockNetwork)(nil).SendWithStream), arg0, arg1)
	return &NetworkSendWithStreamCall{Call: call}
}

// NetworkSendWithStreamCall wrap *gomock.Call
type NetworkSendWithStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *NetworkSendWithStreamCall) Return(arg0 error) *NetworkSendWithStreamCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *NetworkSendWithStreamCall) Do(f func(network.Stream, *pb.Message) error) *NetworkSendWithStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *NetworkSendWithStreamCall) DoAndReturn(f func(network.Stream, *pb.Message) error) *NetworkSendWithStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Start mocks base method.
func (m *MockNetwork) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockNetworkMockRecorder) Start() *NetworkStartCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockNetwork)(nil).Start))
	return &NetworkStartCall{Call: call}
}

// NetworkStartCall wrap *gomock.Call
type NetworkStartCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *NetworkStartCall) Return(arg0 error) *NetworkStartCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *NetworkStartCall) Do(f func() error) *NetworkStartCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *NetworkStartCall) DoAndReturn(f func() error) *NetworkStartCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Stop mocks base method.
func (m *MockNetwork) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockNetworkMockRecorder) Stop() *NetworkStopCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockNetwork)(nil).Stop))
	return &NetworkStopCall{Call: call}
}

// NetworkStopCall wrap *gomock.Call
type NetworkStopCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *NetworkStopCall) Return(arg0 error) *NetworkStopCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *NetworkStopCall) Do(f func() error) *NetworkStopCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *NetworkStopCall) DoAndReturn(f func() error) *NetworkStopCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
