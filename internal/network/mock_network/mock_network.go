// Code generated by MockGen. DO NOT EDIT.
// Source: network.go
//
// Generated by this command:
//
//	mockgen -destination mock_network/mock_network.go -package mock_network -source network.go -typed
//

// Package mock_network is a generated GoMock package.
package mock_network

import (
	context "context"
	reflect "reflect"

	pb "github.com/axiomesh/axiom-kit/types/pb"
	network "github.com/axiomesh/axiom-p2p"
	gomock "go.uber.org/mock/gomock"
)

// MockPipe is a mock of Pipe interface.
type MockPipe struct {
	ctrl     *gomock.Controller
	recorder *MockPipeMockRecorder
}

// MockPipeMockRecorder is the mock recorder for MockPipe.
type MockPipeMockRecorder struct {
	mock *MockPipe
}

// NewMockPipe creates a new mock instance.
func NewMockPipe(ctrl *gomock.Controller) *MockPipe {
	mock := &MockPipe{ctrl: ctrl}
	mock.recorder = &MockPipeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipe) EXPECT() *MockPipeMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockPipe) ISGOMOCK() struct{} {
	return struct{}{}
}

// Broadcast mocks base method.
func (m *MockPipe) Broadcast(ctx context.Context, targets []string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Broadcast", ctx, targets, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockPipeMockRecorder) Broadcast(ctx, targets, data any) *MockPipeBroadcastCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockPipe)(nil).Broadcast), ctx, targets, data)
	return &MockPipeBroadcastCall{Call: call}
}

// MockPipeBroadcastCall wrap *gomock.Call
type MockPipeBroadcastCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPipeBroadcastCall) Return(arg0 error) *MockPipeBroadcastCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPipeBroadcastCall) Do(f func(context.Context, []string, []byte) error) *MockPipeBroadcastCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPipeBroadcastCall) DoAndReturn(f func(context.Context, []string, []byte) error) *MockPipeBroadcastCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Receive mocks base method.
func (m *MockPipe) Receive(ctx context.Context) *network.PipeMsg {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", ctx)
	ret0, _ := ret[0].(*network.PipeMsg)
	return ret0
}

// Receive indicates an expected call of Receive.
func (mr *MockPipeMockRecorder) Receive(ctx any) *MockPipeReceiveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockPipe)(nil).Receive), ctx)
	return &MockPipeReceiveCall{Call: call}
}

// MockPipeReceiveCall wrap *gomock.Call
type MockPipeReceiveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPipeReceiveCall) Return(arg0 *network.PipeMsg) *MockPipeReceiveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPipeReceiveCall) Do(f func(context.Context) *network.PipeMsg) *MockPipeReceiveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPipeReceiveCall) DoAndReturn(f func(context.Context) *network.PipeMsg) *MockPipeReceiveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Send mocks base method.
func (m *MockPipe) Send(ctx context.Context, to string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, to, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPipeMockRecorder) Send(ctx, to, data any) *MockPipeSendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPipe)(nil).Send), ctx, to, data)
	return &MockPipeSendCall{Call: call}
}

// MockPipeSendCall wrap *gomock.Call
type MockPipeSendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPipeSendCall) Return(arg0 error) *MockPipeSendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPipeSendCall) Do(f func(context.Context, string, []byte) error) *MockPipeSendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPipeSendCall) DoAndReturn(f func(context.Context, string, []byte) error) *MockPipeSendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// String mocks base method.
func (m *MockPipe) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockPipeMockRecorder) String() *MockPipeStringCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockPipe)(nil).String))
	return &MockPipeStringCall{Call: call}
}

// MockPipeStringCall wrap *gomock.Call
type MockPipeStringCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPipeStringCall) Return(arg0 string) *MockPipeStringCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPipeStringCall) Do(f func() string) *MockPipeStringCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPipeStringCall) DoAndReturn(f func() string) *MockPipeStringCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNetwork is a mock of Network interface.
type MockNetwork struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkMockRecorder
}

// MockNetworkMockRecorder is the mock recorder for MockNetwork.
type MockNetworkMockRecorder struct {
	mock *MockNetwork
}

// NewMockNetwork creates a new mock instance.
func NewMockNetwork(ctrl *gomock.Controller) *MockNetwork {
	mock := &MockNetwork{ctrl: ctrl}
	mock.recorder = &MockNetworkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetwork) EXPECT() *MockNetworkMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockNetwork) ISGOMOCK() struct{} {
	return struct{}{}
}

// CreatePipe mocks base method.
func (m *MockNetwork) CreatePipe(ctx context.Context, pipeID string) (network.Pipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipe", ctx, pipeID)
	ret0, _ := ret[0].(network.Pipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePipe indicates an expected call of CreatePipe.
func (mr *MockNetworkMockRecorder) CreatePipe(ctx, pipeID any) *MockNetworkCreatePipeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipe", reflect.TypeOf((*MockNetwork)(nil).CreatePipe), ctx, pipeID)
	return &MockNetworkCreatePipeCall{Call: call}
}

// MockNetworkCreatePipeCall wrap *gomock.Call
type MockNetworkCreatePipeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkCreatePipeCall) Return(arg0 network.Pipe, arg1 error) *MockNetworkCreatePipeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkCreatePipeCall) Do(f func(context.Context, string) (network.Pipe, error)) *MockNetworkCreatePipeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkCreatePipeCall) DoAndReturn(f func(context.Context, string) (network.Pipe, error)) *MockNetworkCreatePipeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetConnectedPeers mocks base method.
func (m *MockNetwork) GetConnectedPeers(peers []string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectedPeers", peers)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetConnectedPeers indicates an expected call of GetConnectedPeers.
func (mr *MockNetworkMockRecorder) GetConnectedPeers(peers any) *MockNetworkGetConnectedPeersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectedPeers", reflect.TypeOf((*MockNetwork)(nil).GetConnectedPeers), peers)
	return &MockNetworkGetConnectedPeersCall{Call: call}
}

// MockNetworkGetConnectedPeersCall wrap *gomock.Call
type MockNetworkGetConnectedPeersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkGetConnectedPeersCall) Return(arg0 []string) *MockNetworkGetConnectedPeersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkGetConnectedPeersCall) Do(f func([]string) []string) *MockNetworkGetConnectedPeersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkGetConnectedPeersCall) DoAndReturn(f func([]string) []string) *MockNetworkGetConnectedPeersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PeerID mocks base method.
func (m *MockNetwork) PeerID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeerID")
	ret0, _ := ret[0].(string)
	return ret0
}

// PeerID indicates an expected call of PeerID.
func (mr *MockNetworkMockRecorder) PeerID() *MockNetworkPeerIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeerID", reflect.TypeOf((*MockNetwork)(nil).PeerID))
	return &MockNetworkPeerIDCall{Call: call}
}

// MockNetworkPeerIDCall wrap *gomock.Call
type MockNetworkPeerIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkPeerIDCall) Return(arg0 string) *MockNetworkPeerIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkPeerIDCall) Do(f func() string) *MockNetworkPeerIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkPeerIDCall) DoAndReturn(f func() string) *MockNetworkPeerIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RegisterMsgHandler mocks base method.
func (m *MockNetwork) RegisterMsgHandler(messageType pb.Message_Type, handler func(network.Stream, *pb.Message)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterMsgHandler", messageType, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterMsgHandler indicates an expected call of RegisterMsgHandler.
func (mr *MockNetworkMockRecorder) RegisterMsgHandler(messageType, handler any) *MockNetworkRegisterMsgHandlerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMsgHandler", reflect.TypeOf((*MockNetwork)(nil).RegisterMsgHandler), messageType, handler)
	return &MockNetworkRegisterMsgHandlerCall{Call: call}
}

// MockNetworkRegisterMsgHandlerCall wrap *gomock.Call
type MockNetworkRegisterMsgHandlerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkRegisterMsgHandlerCall) Return(arg0 error) *MockNetworkRegisterMsgHandlerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkRegisterMsgHandlerCall) Do(f func(pb.Message_Type, func(network.Stream, *pb.Message)) error) *MockNetworkRegisterMsgHandlerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkRegisterMsgHandlerCall) DoAndReturn(f func(pb.Message_Type, func(network.Stream, *pb.Message)) error) *MockNetworkRegisterMsgHandlerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RegisterMultiMsgHandler mocks base method.
func (m *MockNetwork) RegisterMultiMsgHandler(messageTypes []pb.Message_Type, handler func(network.Stream, *pb.Message)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterMultiMsgHandler", messageTypes, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterMultiMsgHandler indicates an expected call of RegisterMultiMsgHandler.
func (mr *MockNetworkMockRecorder) RegisterMultiMsgHandler(messageTypes, handler any) *MockNetworkRegisterMultiMsgHandlerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMultiMsgHandler", reflect.TypeOf((*MockNetwork)(nil).RegisterMultiMsgHandler), messageTypes, handler)
	return &MockNetworkRegisterMultiMsgHandlerCall{Call: call}
}

// MockNetworkRegisterMultiMsgHandlerCall wrap *gomock.Call
type MockNetworkRegisterMultiMsgHandlerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkRegisterMultiMsgHandlerCall) Return(arg0 error) *MockNetworkRegisterMultiMsgHandlerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkRegisterMultiMsgHandlerCall) Do(f func([]pb.Message_Type, func(network.Stream, *pb.Message)) error) *MockNetworkRegisterMultiMsgHandlerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkRegisterMultiMsgHandlerCall) DoAndReturn(f func([]pb.Message_Type, func(network.Stream, *pb.Message)) error) *MockNetworkRegisterMultiMsgHandlerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Send mocks base method.
func (m *MockNetwork) Send(arg0 string, arg1 *pb.Message) (*pb.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(*pb.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockNetworkMockRecorder) Send(arg0, arg1 any) *MockNetworkSendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNetwork)(nil).Send), arg0, arg1)
	return &MockNetworkSendCall{Call: call}
}

// MockNetworkSendCall wrap *gomock.Call
type MockNetworkSendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkSendCall) Return(arg0 *pb.Message, arg1 error) *MockNetworkSendCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkSendCall) Do(f func(string, *pb.Message) (*pb.Message, error)) *MockNetworkSendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkSendCall) DoAndReturn(f func(string, *pb.Message) (*pb.Message, error)) *MockNetworkSendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendWithStream mocks base method.
func (m *MockNetwork) SendWithStream(arg0 network.Stream, arg1 *pb.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWithStream", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendWithStream indicates an expected call of SendWithStream.
func (mr *MockNetworkMockRecorder) SendWithStream(arg0, arg1 any) *MockNetworkSendWithStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWithStream", reflect.TypeOf((*MockNetwork)(nil).SendWithStream), arg0, arg1)
	return &MockNetworkSendWithStreamCall{Call: call}
}

// MockNetworkSendWithStreamCall wrap *gomock.Call
type MockNetworkSendWithStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkSendWithStreamCall) Return(arg0 error) *MockNetworkSendWithStreamCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkSendWithStreamCall) Do(f func(network.Stream, *pb.Message) error) *MockNetworkSendWithStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkSendWithStreamCall) DoAndReturn(f func(network.Stream, *pb.Message) error) *MockNetworkSendWithStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Start mocks base method.
func (m *MockNetwork) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockNetworkMockRecorder) Start() *MockNetworkStartCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockNetwork)(nil).Start))
	return &MockNetworkStartCall{Call: call}
}

// MockNetworkStartCall wrap *gomock.Call
type MockNetworkStartCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkStartCall) Return(arg0 error) *MockNetworkStartCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkStartCall) Do(f func() error) *MockNetworkStartCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkStartCall) DoAndReturn(f func() error) *MockNetworkStartCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Stop mocks base method.
func (m *MockNetwork) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockNetworkMockRecorder) Stop() *MockNetworkStopCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockNetwork)(nil).Stop))
	return &MockNetworkStopCall{Call: call}
}

// MockNetworkStopCall wrap *gomock.Call
type MockNetworkStopCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkStopCall) Return(arg0 error) *MockNetworkStopCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkStopCall) Do(f func() error) *MockNetworkStopCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkStopCall) DoAndReturn(f func() error) *MockNetworkStopCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
