package saccount

import (
	"math/big"
	"strings"
	"testing"

	ethcommon "github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/stretchr/testify/assert"

	"github.com/axiomesh/axiom-kit/types"
	"github.com/axiomesh/axiom-ledger/internal/executor/system/common"
)

// erc20 runtime bin code
const erc20bytecode = ""

func TestSmartAccount_Execute(t *testing.T) {
	entrypoint, factory := initEntryPoint(t)
	// deploy erc20
	erc20ContractAddr := ethcommon.HexToAddress("0x82C6D3ed4cD33d8EC1E51d0B5Cc1d822Eaa0c3dC")
	contractAccount := entrypoint.stateLedger.GetOrCreateAccount(types.NewAddress(erc20ContractAddr.Bytes()))
	contractAccount.SetCodeAndHash(ethcommon.Hex2Bytes(erc20bytecode))

	sk, _ := crypto.GenerateKey()
	owner := crypto.PubkeyToAddress(sk.PublicKey)
	accountAddr := factory.GetAddress(owner, big.NewInt(1))

	t.Logf("account address: %s", accountAddr)

	sa := NewSmartAccount(entrypoint.logger, entrypoint)
	entrypointAddr := entrypoint.selfAddress().ETHAddress()
	sa.SetContext(&common.VMContext{
		StateLedger:   entrypoint.stateLedger,
		CurrentHeight: 1,
		CurrentLogs:   entrypoint.currentLogs,
		CurrentUser:   &entrypointAddr,
		CurrentEVM:    entrypoint.currentEVM,
	})
	sa.InitializeOrLoad(accountAddr, owner, ethcommon.Address{}, big.NewInt(MaxCallGasLimit))

	// no callFunc
	callData := ethcommon.Hex2Bytes("b61d27f600000000000000000000000082c6d3ed4cd33d8ec1e51d0b5cc1d822eaa0c3dc000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000")
	isExist, _, err := JudgeOrCallInnerMethod(callData, sa)
	assert.Nil(t, err)
	assert.True(t, isExist)

	// totalSupply
	callData = ethcommon.Hex2Bytes("18160ddd")
	_, err = sa.Execute(erc20ContractAddr, big.NewInt(0), callData)
	assert.Nil(t, err)

	// balanceOf
	callData = ethcommon.Hex2Bytes("70a082310000000000000000000000001cd68912e00c5a02ea0b8b2d972a9c13906b6650")
	_, err = sa.Execute(erc20ContractAddr, big.NewInt(0), callData)
	assert.Nil(t, err)

	// mint erc20
	// 0x40c10f190000000000000000000000001cd68912e00c5a02ea0b8b2d972a9c13906b66500000000000000000000000000000000000000000000000000000000000002710
	callData = ethcommon.Hex2Bytes("40c10f190000000000000000000000001cd68912e00c5a02ea0b8b2d972a9c13906b66500000000000000000000000000000000000000000000000000000000000002710")
	_, err = sa.Execute(erc20ContractAddr, big.NewInt(0), callData)
	assert.Nil(t, err)

	// balanceOf after mint
	callData = ethcommon.Hex2Bytes("70a082310000000000000000000000001cd68912e00c5a02ea0b8b2d972a9c13906b6650")
	_, err = sa.Execute(erc20ContractAddr, big.NewInt(0), callData)
	assert.Nil(t, err)

	// transfer erc20
	callData = ethcommon.Hex2Bytes("b61d27f600000000000000000000000082c6d3ed4cd33d8ec1e51d0b5cc1d822eaa0c3dc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000044a9059cbb000000000000000000000000c7f999b83af6df9e67d0a37ee7e900bf38b3d013000000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000000000")
	// replace caller to smart account address
	sa.selfAddr.SetBytes(ethcommon.Hex2Bytes("1cd68912e00c5a02ea0b8b2d972a9c13906b6650"))
	sa.remainingGas = big.NewInt(MaxCallGasLimit)
	isExist, _, err = JudgeOrCallInnerMethod(callData, sa)
	assert.Nil(t, err)
	assert.True(t, isExist)

	// test smart account
	sa2 := NewSmartAccount(entrypoint.logger, entrypoint)
	sk2, _ := crypto.GenerateKey()
	owner2 := crypto.PubkeyToAddress(sk2.PublicKey)
	accountAddr2 := factory.GetAddress(owner2, big.NewInt(1))
	sa2.SetContext(&common.VMContext{
		StateLedger:   entrypoint.stateLedger,
		CurrentHeight: 1,
		CurrentLogs:   entrypoint.currentLogs,
		CurrentUser:   &entrypointAddr,
		CurrentEVM:    entrypoint.currentEVM,
	})
	sa2.InitializeOrLoad(accountAddr2, owner2, ethcommon.Address{}, big.NewInt(MaxCallGasLimit))

	// sa2 transfer to sa
	// no callFunc
	str := "b61d27f600000000000000000000000082c6d3ed4cd33d8ec1e51d0b5cc1d822eaa0c3dc000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000"
	dest := strings.ReplaceAll(str, "82c6d3ed4cd33d8ec1e51d0b5cc1d822eaa0c3dc", strings.TrimLeft(accountAddr.Hex(), "0x"))
	callData = ethcommon.Hex2Bytes(dest)
	isExist, _, err = JudgeOrCallInnerMethod(callData, sa2)
	assert.Nil(t, err)
	assert.True(t, isExist)
}
