package interfaces

import (
	"math/big"

	"github.com/axiomesh/axiom-ledger/internal/executor/system/common"
	"github.com/ethereum/go-ethereum/accounts/abi"
	ethcommon "github.com/ethereum/go-ethereum/common"
)

var (
	ReturnInfoType, _ = abi.NewType("tuple", "", []abi.ArgumentMarshaling{
		{
			Name: "preOpGas",
			Type: "uint256",
		},
		{
			Name: "prefund",
			Type: "uint256",
		},
		{
			Name: "sigFailed",
			Type: "bool",
		},
		{
			Name: "validAfter",
			Type: "uint48",
		},
		{
			Name: "validUntil",
			Type: "uint48",
		},
		{
			Name: "paymasterContext",
			Type: "bytes",
		},
	})
)

type ReturnInfo struct {
	PreOpGas         *big.Int
	Prefund          *big.Int
	SigFailed        bool
	ValidAfter       *big.Int
	ValidUntil       *big.Int
	PaymasterContext []byte
}

type IEntryPoint interface {
	common.SystemContract
	IStakeManager
	INonceManager

	// HandleOps execute a batch of UserOperation.
	// no signature aggregator is used.
	// if any account requires an aggregator (that is, it returned an aggregator when
	// performing simulateValidation), then handleAggregatedOps() must be used instead.
	// @param ops the operations to execute
	// @param beneficiary the address to receive the fees
	HandleOps(ops []UserOperation, beneficiary ethcommon.Address) error

	// GetUserOpHash generate a request Id - unique identifier for this request.
	// the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.
	GetUserOpHash(userOp UserOperation) ethcommon.Hash

	// SimulateValidation simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.
	// @dev this method always revert. Successful result is ValidationResult error. other errors are failures.
	// @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.
	// @param userOp the user operation to validate.
	SimulateValidation(userOp UserOperation) error

	// GetSenderAddress get counterfactual sender address.
	// Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.
	// this method always revert, and returns the address in SenderAddressResult error
	GetSenderAddress(initCode []byte) error

	// SimulateHandleOp simulate full execution of a UserOperation (including both validation and target execution)
	// this method will always revert with "ExecutionResult".
	// it performs full validation of the UserOperation, but ignores signature error.
	// an optional target address is called after the userop succeeds, and its value is returned
	// (before the entire call is reverted)
	SimulateHandleOp(op UserOperation, target ethcommon.Address, targetCallData []byte) error
}

// FailedOp is related to entrypoint abi file
func FailedOp(opIndex *big.Int, reason string) error {
	return common.NewRevertError("FailedOp", abi.Arguments{
		abi.Argument{
			Name: "opIndex",
			Type: common.BigIntType,
		},
		{
			Name: "reason",
			Type: common.StringType,
		},
	}, []any{opIndex, reason})
}

// ValidationResult is related to entrypoint abi file
func ValidationResult(returnInfo *ReturnInfo, senderInfo *StakeInfo, factoryInfo *StakeInfo, paymasterInfo *StakeInfo) error {
	return common.NewRevertError("ValidationResult", abi.Arguments{
		abi.Argument{
			Name: "returnInfo",
			Type: ReturnInfoType,
		},
		{
			Name: "senderInfo",
			Type: StakeInfoType,
		},
		{
			Name: "factoryInfo",
			Type: StakeInfoType,
		},
		{
			Name: "paymasterInfo",
			Type: StakeInfoType,
		},
	}, []any{returnInfo, senderInfo, factoryInfo, paymasterInfo})
}

// SenderAddressResult is related to entrypoint abi file
func SenderAddressResult(sender ethcommon.Address) error {
	return common.NewRevertError("SenderAddressResult", abi.Arguments{
		abi.Argument{
			Name: "sender",
			Type: common.AddressType,
		},
	}, []any{sender})
}

// ExecutionResult is related to entrypoint abi file
func ExecutionResult(preOpGas *big.Int, paid *big.Int, validAfter *big.Int, validUntil *big.Int, targetSuccess bool, targetResult []byte) error {
	return common.NewRevertError("ExecutionResult", abi.Arguments{
		abi.Argument{
			Name: "preOpGas",
			Type: common.BigIntType,
		},
		{
			Name: "paid",
			Type: common.BigIntType,
		},
		{
			Name: "validAfter",
			Type: common.UInt48Type,
		},
		{
			Name: "validUntil",
			Type: common.UInt48Type,
		},
		{
			Name: "targetSuccess",
			Type: common.BoolType,
		},
		{
			Name: "targetResult",
			Type: common.BytesType,
		},
	}, []any{preOpGas, paid, validAfter, validUntil, targetSuccess, targetResult})
}
