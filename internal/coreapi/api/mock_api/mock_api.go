// Code generated by MockGen. DO NOT EDIT.
// Source: api.go
//
// Generated by this command:
//
//	mockgen -destination mock_api/mock_api.go -package mock_api -source api.go -typed
//

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	big "math/big"
	reflect "reflect"

	types "github.com/axiomesh/axiom-kit/types"
	chainstate "github.com/axiomesh/axiom-ledger/internal/chainstate"
	api "github.com/axiomesh/axiom-ledger/internal/coreapi/api"
	ledger "github.com/axiomesh/axiom-ledger/internal/ledger"
	common "github.com/axiomesh/axiom-ledger/internal/sync/common"
	events "github.com/axiomesh/axiom-ledger/pkg/events"
	core "github.com/ethereum/go-ethereum/core"
	vm "github.com/ethereum/go-ethereum/core/vm"
	event "github.com/ethereum/go-ethereum/event"
	params "github.com/ethereum/go-ethereum/params"
	gomock "go.uber.org/mock/gomock"
)

// MockCoreAPI is a mock of CoreAPI interface.
type MockCoreAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCoreAPIMockRecorder
}

// MockCoreAPIMockRecorder is the mock recorder for MockCoreAPI.
type MockCoreAPIMockRecorder struct {
	mock *MockCoreAPI
}

// NewMockCoreAPI creates a new mock instance.
func NewMockCoreAPI(ctrl *gomock.Controller) *MockCoreAPI {
	mock := &MockCoreAPI{ctrl: ctrl}
	mock.recorder = &MockCoreAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoreAPI) EXPECT() *MockCoreAPIMockRecorder {
	return m.recorder
}

// Broker mocks base method.
func (m *MockCoreAPI) Broker() api.BrokerAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Broker")
	ret0, _ := ret[0].(api.BrokerAPI)
	return ret0
}

// Broker indicates an expected call of Broker.
func (mr *MockCoreAPIMockRecorder) Broker() *MockCoreAPIBrokerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broker", reflect.TypeOf((*MockCoreAPI)(nil).Broker))
	return &MockCoreAPIBrokerCall{Call: call}
}

// MockCoreAPIBrokerCall wrap *gomock.Call
type MockCoreAPIBrokerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCoreAPIBrokerCall) Return(arg0 api.BrokerAPI) *MockCoreAPIBrokerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCoreAPIBrokerCall) Do(f func() api.BrokerAPI) *MockCoreAPIBrokerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCoreAPIBrokerCall) DoAndReturn(f func() api.BrokerAPI) *MockCoreAPIBrokerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Chain mocks base method.
func (m *MockCoreAPI) Chain() api.ChainAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chain")
	ret0, _ := ret[0].(api.ChainAPI)
	return ret0
}

// Chain indicates an expected call of Chain.
func (mr *MockCoreAPIMockRecorder) Chain() *MockCoreAPIChainCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chain", reflect.TypeOf((*MockCoreAPI)(nil).Chain))
	return &MockCoreAPIChainCall{Call: call}
}

// MockCoreAPIChainCall wrap *gomock.Call
type MockCoreAPIChainCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCoreAPIChainCall) Return(arg0 api.ChainAPI) *MockCoreAPIChainCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCoreAPIChainCall) Do(f func() api.ChainAPI) *MockCoreAPIChainCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCoreAPIChainCall) DoAndReturn(f func() api.ChainAPI) *MockCoreAPIChainCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ChainState mocks base method.
func (m *MockCoreAPI) ChainState() *chainstate.ChainState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainState")
	ret0, _ := ret[0].(*chainstate.ChainState)
	return ret0
}

// ChainState indicates an expected call of ChainState.
func (mr *MockCoreAPIMockRecorder) ChainState() *MockCoreAPIChainStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainState", reflect.TypeOf((*MockCoreAPI)(nil).ChainState))
	return &MockCoreAPIChainStateCall{Call: call}
}

// MockCoreAPIChainStateCall wrap *gomock.Call
type MockCoreAPIChainStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCoreAPIChainStateCall) Return(arg0 *chainstate.ChainState) *MockCoreAPIChainStateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCoreAPIChainStateCall) Do(f func() *chainstate.ChainState) *MockCoreAPIChainStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCoreAPIChainStateCall) DoAndReturn(f func() *chainstate.ChainState) *MockCoreAPIChainStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Feed mocks base method.
func (m *MockCoreAPI) Feed() api.FeedAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Feed")
	ret0, _ := ret[0].(api.FeedAPI)
	return ret0
}

// Feed indicates an expected call of Feed.
func (mr *MockCoreAPIMockRecorder) Feed() *MockCoreAPIFeedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Feed", reflect.TypeOf((*MockCoreAPI)(nil).Feed))
	return &MockCoreAPIFeedCall{Call: call}
}

// MockCoreAPIFeedCall wrap *gomock.Call
type MockCoreAPIFeedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCoreAPIFeedCall) Return(arg0 api.FeedAPI) *MockCoreAPIFeedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCoreAPIFeedCall) Do(f func() api.FeedAPI) *MockCoreAPIFeedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCoreAPIFeedCall) DoAndReturn(f func() api.FeedAPI) *MockCoreAPIFeedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Gas mocks base method.
func (m *MockCoreAPI) Gas() api.GasAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gas")
	ret0, _ := ret[0].(api.GasAPI)
	return ret0
}

// Gas indicates an expected call of Gas.
func (mr *MockCoreAPIMockRecorder) Gas() *MockCoreAPIGasCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gas", reflect.TypeOf((*MockCoreAPI)(nil).Gas))
	return &MockCoreAPIGasCall{Call: call}
}

// MockCoreAPIGasCall wrap *gomock.Call
type MockCoreAPIGasCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCoreAPIGasCall) Return(arg0 api.GasAPI) *MockCoreAPIGasCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCoreAPIGasCall) Do(f func() api.GasAPI) *MockCoreAPIGasCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCoreAPIGasCall) DoAndReturn(f func() api.GasAPI) *MockCoreAPIGasCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TxPool mocks base method.
func (m *MockCoreAPI) TxPool() api.TxPoolAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxPool")
	ret0, _ := ret[0].(api.TxPoolAPI)
	return ret0
}

// TxPool indicates an expected call of TxPool.
func (mr *MockCoreAPIMockRecorder) TxPool() *MockCoreAPITxPoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxPool", reflect.TypeOf((*MockCoreAPI)(nil).TxPool))
	return &MockCoreAPITxPoolCall{Call: call}
}

// MockCoreAPITxPoolCall wrap *gomock.Call
type MockCoreAPITxPoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCoreAPITxPoolCall) Return(arg0 api.TxPoolAPI) *MockCoreAPITxPoolCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCoreAPITxPoolCall) Do(f func() api.TxPoolAPI) *MockCoreAPITxPoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCoreAPITxPoolCall) DoAndReturn(f func() api.TxPoolAPI) *MockCoreAPITxPoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockBrokerAPI is a mock of BrokerAPI interface.
type MockBrokerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerAPIMockRecorder
}

// MockBrokerAPIMockRecorder is the mock recorder for MockBrokerAPI.
type MockBrokerAPIMockRecorder struct {
	mock *MockBrokerAPI
}

// NewMockBrokerAPI creates a new mock instance.
func NewMockBrokerAPI(ctrl *gomock.Controller) *MockBrokerAPI {
	mock := &MockBrokerAPI{ctrl: ctrl}
	mock.recorder = &MockBrokerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrokerAPI) EXPECT() *MockBrokerAPIMockRecorder {
	return m.recorder
}

// ChainConfig mocks base method.
func (m *MockBrokerAPI) ChainConfig() *params.ChainConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainConfig")
	ret0, _ := ret[0].(*params.ChainConfig)
	return ret0
}

// ChainConfig indicates an expected call of ChainConfig.
func (mr *MockBrokerAPIMockRecorder) ChainConfig() *MockBrokerAPIChainConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainConfig", reflect.TypeOf((*MockBrokerAPI)(nil).ChainConfig))
	return &MockBrokerAPIChainConfigCall{Call: call}
}

// MockBrokerAPIChainConfigCall wrap *gomock.Call
type MockBrokerAPIChainConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBrokerAPIChainConfigCall) Return(arg0 *params.ChainConfig) *MockBrokerAPIChainConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBrokerAPIChainConfigCall) Do(f func() *params.ChainConfig) *MockBrokerAPIChainConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBrokerAPIChainConfigCall) DoAndReturn(f func() *params.ChainConfig) *MockBrokerAPIChainConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ConsensusReady mocks base method.
func (m *MockBrokerAPI) ConsensusReady() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsensusReady")
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsensusReady indicates an expected call of ConsensusReady.
func (mr *MockBrokerAPIMockRecorder) ConsensusReady() *MockBrokerAPIConsensusReadyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsensusReady", reflect.TypeOf((*MockBrokerAPI)(nil).ConsensusReady))
	return &MockBrokerAPIConsensusReadyCall{Call: call}
}

// MockBrokerAPIConsensusReadyCall wrap *gomock.Call
type MockBrokerAPIConsensusReadyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBrokerAPIConsensusReadyCall) Return(arg0 error) *MockBrokerAPIConsensusReadyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBrokerAPIConsensusReadyCall) Do(f func() error) *MockBrokerAPIConsensusReadyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBrokerAPIConsensusReadyCall) DoAndReturn(f func() error) *MockBrokerAPIConsensusReadyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBlockExtra mocks base method.
func (m *MockBrokerAPI) GetBlockExtra(height uint64) (*types.BlockExtra, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockExtra", height)
	ret0, _ := ret[0].(*types.BlockExtra)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockExtra indicates an expected call of GetBlockExtra.
func (mr *MockBrokerAPIMockRecorder) GetBlockExtra(height any) *MockBrokerAPIGetBlockExtraCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockExtra", reflect.TypeOf((*MockBrokerAPI)(nil).GetBlockExtra), height)
	return &MockBrokerAPIGetBlockExtraCall{Call: call}
}

// MockBrokerAPIGetBlockExtraCall wrap *gomock.Call
type MockBrokerAPIGetBlockExtraCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBrokerAPIGetBlockExtraCall) Return(arg0 *types.BlockExtra, arg1 error) *MockBrokerAPIGetBlockExtraCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBrokerAPIGetBlockExtraCall) Do(f func(uint64) (*types.BlockExtra, error)) *MockBrokerAPIGetBlockExtraCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBrokerAPIGetBlockExtraCall) DoAndReturn(f func(uint64) (*types.BlockExtra, error)) *MockBrokerAPIGetBlockExtraCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBlockHeader mocks base method.
func (m *MockBrokerAPI) GetBlockHeader(mode, key string) (*types.BlockHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHeader", mode, key)
	ret0, _ := ret[0].(*types.BlockHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHeader indicates an expected call of GetBlockHeader.
func (mr *MockBrokerAPIMockRecorder) GetBlockHeader(mode, key any) *MockBrokerAPIGetBlockHeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHeader", reflect.TypeOf((*MockBrokerAPI)(nil).GetBlockHeader), mode, key)
	return &MockBrokerAPIGetBlockHeaderCall{Call: call}
}

// MockBrokerAPIGetBlockHeaderCall wrap *gomock.Call
type MockBrokerAPIGetBlockHeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBrokerAPIGetBlockHeaderCall) Return(arg0 *types.BlockHeader, arg1 error) *MockBrokerAPIGetBlockHeaderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBrokerAPIGetBlockHeaderCall) Do(f func(string, string) (*types.BlockHeader, error)) *MockBrokerAPIGetBlockHeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBrokerAPIGetBlockHeaderCall) DoAndReturn(f func(string, string) (*types.BlockHeader, error)) *MockBrokerAPIGetBlockHeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBlockTxHashList mocks base method.
func (m *MockBrokerAPI) GetBlockTxHashList(height uint64) ([]*types.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockTxHashList", height)
	ret0, _ := ret[0].([]*types.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockTxHashList indicates an expected call of GetBlockTxHashList.
func (mr *MockBrokerAPIMockRecorder) GetBlockTxHashList(height any) *MockBrokerAPIGetBlockTxHashListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockTxHashList", reflect.TypeOf((*MockBrokerAPI)(nil).GetBlockTxHashList), height)
	return &MockBrokerAPIGetBlockTxHashListCall{Call: call}
}

// MockBrokerAPIGetBlockTxHashListCall wrap *gomock.Call
type MockBrokerAPIGetBlockTxHashListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBrokerAPIGetBlockTxHashListCall) Return(arg0 []*types.Hash, arg1 error) *MockBrokerAPIGetBlockTxHashListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBrokerAPIGetBlockTxHashListCall) Do(f func(uint64) ([]*types.Hash, error)) *MockBrokerAPIGetBlockTxHashListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBrokerAPIGetBlockTxHashListCall) DoAndReturn(f func(uint64) ([]*types.Hash, error)) *MockBrokerAPIGetBlockTxHashListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBlockTxList mocks base method.
func (m *MockBrokerAPI) GetBlockTxList(height uint64) ([]*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockTxList", height)
	ret0, _ := ret[0].([]*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockTxList indicates an expected call of GetBlockTxList.
func (mr *MockBrokerAPIMockRecorder) GetBlockTxList(height any) *MockBrokerAPIGetBlockTxListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockTxList", reflect.TypeOf((*MockBrokerAPI)(nil).GetBlockTxList), height)
	return &MockBrokerAPIGetBlockTxListCall{Call: call}
}

// MockBrokerAPIGetBlockTxListCall wrap *gomock.Call
type MockBrokerAPIGetBlockTxListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBrokerAPIGetBlockTxListCall) Return(arg0 []*types.Transaction, arg1 error) *MockBrokerAPIGetBlockTxListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBrokerAPIGetBlockTxListCall) Do(f func(uint64) ([]*types.Transaction, error)) *MockBrokerAPIGetBlockTxListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBrokerAPIGetBlockTxListCall) DoAndReturn(f func(uint64) ([]*types.Transaction, error)) *MockBrokerAPIGetBlockTxListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetEvm mocks base method.
func (m *MockBrokerAPI) GetEvm(mes *core.Message, vmConfig *vm.Config) (*vm.EVM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvm", mes, vmConfig)
	ret0, _ := ret[0].(*vm.EVM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvm indicates an expected call of GetEvm.
func (mr *MockBrokerAPIMockRecorder) GetEvm(mes, vmConfig any) *MockBrokerAPIGetEvmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvm", reflect.TypeOf((*MockBrokerAPI)(nil).GetEvm), mes, vmConfig)
	return &MockBrokerAPIGetEvmCall{Call: call}
}

// MockBrokerAPIGetEvmCall wrap *gomock.Call
type MockBrokerAPIGetEvmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBrokerAPIGetEvmCall) Return(arg0 *vm.EVM, arg1 error) *MockBrokerAPIGetEvmCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBrokerAPIGetEvmCall) Do(f func(*core.Message, *vm.Config) (*vm.EVM, error)) *MockBrokerAPIGetEvmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBrokerAPIGetEvmCall) DoAndReturn(f func(*core.Message, *vm.Config) (*vm.EVM, error)) *MockBrokerAPIGetEvmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetReceipt mocks base method.
func (m *MockBrokerAPI) GetReceipt(arg0 *types.Hash) (*types.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceipt", arg0)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceipt indicates an expected call of GetReceipt.
func (mr *MockBrokerAPIMockRecorder) GetReceipt(arg0 any) *MockBrokerAPIGetReceiptCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceipt", reflect.TypeOf((*MockBrokerAPI)(nil).GetReceipt), arg0)
	return &MockBrokerAPIGetReceiptCall{Call: call}
}

// MockBrokerAPIGetReceiptCall wrap *gomock.Call
type MockBrokerAPIGetReceiptCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBrokerAPIGetReceiptCall) Return(arg0 *types.Receipt, arg1 error) *MockBrokerAPIGetReceiptCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBrokerAPIGetReceiptCall) Do(f func(*types.Hash) (*types.Receipt, error)) *MockBrokerAPIGetReceiptCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBrokerAPIGetReceiptCall) DoAndReturn(f func(*types.Hash) (*types.Receipt, error)) *MockBrokerAPIGetReceiptCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSyncProgress mocks base method.
func (m *MockBrokerAPI) GetSyncProgress() *common.SyncProgress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncProgress")
	ret0, _ := ret[0].(*common.SyncProgress)
	return ret0
}

// GetSyncProgress indicates an expected call of GetSyncProgress.
func (mr *MockBrokerAPIMockRecorder) GetSyncProgress() *MockBrokerAPIGetSyncProgressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncProgress", reflect.TypeOf((*MockBrokerAPI)(nil).GetSyncProgress))
	return &MockBrokerAPIGetSyncProgressCall{Call: call}
}

// MockBrokerAPIGetSyncProgressCall wrap *gomock.Call
type MockBrokerAPIGetSyncProgressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBrokerAPIGetSyncProgressCall) Return(arg0 *common.SyncProgress) *MockBrokerAPIGetSyncProgressCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBrokerAPIGetSyncProgressCall) Do(f func() *common.SyncProgress) *MockBrokerAPIGetSyncProgressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBrokerAPIGetSyncProgressCall) DoAndReturn(f func() *common.SyncProgress) *MockBrokerAPIGetSyncProgressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTransaction mocks base method.
func (m *MockBrokerAPI) GetTransaction(arg0 *types.Hash) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", arg0)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockBrokerAPIMockRecorder) GetTransaction(arg0 any) *MockBrokerAPIGetTransactionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockBrokerAPI)(nil).GetTransaction), arg0)
	return &MockBrokerAPIGetTransactionCall{Call: call}
}

// MockBrokerAPIGetTransactionCall wrap *gomock.Call
type MockBrokerAPIGetTransactionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBrokerAPIGetTransactionCall) Return(arg0 *types.Transaction, arg1 error) *MockBrokerAPIGetTransactionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBrokerAPIGetTransactionCall) Do(f func(*types.Hash) (*types.Transaction, error)) *MockBrokerAPIGetTransactionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBrokerAPIGetTransactionCall) DoAndReturn(f func(*types.Hash) (*types.Transaction, error)) *MockBrokerAPIGetTransactionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTransactionMeta mocks base method.
func (m *MockBrokerAPI) GetTransactionMeta(arg0 *types.Hash) (*types.TransactionMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionMeta", arg0)
	ret0, _ := ret[0].(*types.TransactionMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionMeta indicates an expected call of GetTransactionMeta.
func (mr *MockBrokerAPIMockRecorder) GetTransactionMeta(arg0 any) *MockBrokerAPIGetTransactionMetaCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionMeta", reflect.TypeOf((*MockBrokerAPI)(nil).GetTransactionMeta), arg0)
	return &MockBrokerAPIGetTransactionMetaCall{Call: call}
}

// MockBrokerAPIGetTransactionMetaCall wrap *gomock.Call
type MockBrokerAPIGetTransactionMetaCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBrokerAPIGetTransactionMetaCall) Return(arg0 *types.TransactionMeta, arg1 error) *MockBrokerAPIGetTransactionMetaCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBrokerAPIGetTransactionMetaCall) Do(f func(*types.Hash) (*types.TransactionMeta, error)) *MockBrokerAPIGetTransactionMetaCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBrokerAPIGetTransactionMetaCall) DoAndReturn(f func(*types.Hash) (*types.TransactionMeta, error)) *MockBrokerAPIGetTransactionMetaCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetViewStateLedger mocks base method.
func (m *MockBrokerAPI) GetViewStateLedger() ledger.StateLedger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetViewStateLedger")
	ret0, _ := ret[0].(ledger.StateLedger)
	return ret0
}

// GetViewStateLedger indicates an expected call of GetViewStateLedger.
func (mr *MockBrokerAPIMockRecorder) GetViewStateLedger() *MockBrokerAPIGetViewStateLedgerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetViewStateLedger", reflect.TypeOf((*MockBrokerAPI)(nil).GetViewStateLedger))
	return &MockBrokerAPIGetViewStateLedgerCall{Call: call}
}

// MockBrokerAPIGetViewStateLedgerCall wrap *gomock.Call
type MockBrokerAPIGetViewStateLedgerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBrokerAPIGetViewStateLedgerCall) Return(arg0 ledger.StateLedger) *MockBrokerAPIGetViewStateLedgerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBrokerAPIGetViewStateLedgerCall) Do(f func() ledger.StateLedger) *MockBrokerAPIGetViewStateLedgerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBrokerAPIGetViewStateLedgerCall) DoAndReturn(f func() ledger.StateLedger) *MockBrokerAPIGetViewStateLedgerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HandleTransaction mocks base method.
func (m *MockBrokerAPI) HandleTransaction(tx *types.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleTransaction", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleTransaction indicates an expected call of HandleTransaction.
func (mr *MockBrokerAPIMockRecorder) HandleTransaction(tx any) *MockBrokerAPIHandleTransactionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTransaction", reflect.TypeOf((*MockBrokerAPI)(nil).HandleTransaction), tx)
	return &MockBrokerAPIHandleTransactionCall{Call: call}
}

// MockBrokerAPIHandleTransactionCall wrap *gomock.Call
type MockBrokerAPIHandleTransactionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBrokerAPIHandleTransactionCall) Return(arg0 error) *MockBrokerAPIHandleTransactionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBrokerAPIHandleTransactionCall) Do(f func(*types.Transaction) error) *MockBrokerAPIHandleTransactionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBrokerAPIHandleTransactionCall) DoAndReturn(f func(*types.Transaction) error) *MockBrokerAPIHandleTransactionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StateAtTransaction mocks base method.
func (m *MockBrokerAPI) StateAtTransaction(block *types.Block, txIndex int, reexec uint64) (*core.Message, vm.BlockContext, *ledger.StateLedger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateAtTransaction", block, txIndex, reexec)
	ret0, _ := ret[0].(*core.Message)
	ret1, _ := ret[1].(vm.BlockContext)
	ret2, _ := ret[2].(*ledger.StateLedger)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// StateAtTransaction indicates an expected call of StateAtTransaction.
func (mr *MockBrokerAPIMockRecorder) StateAtTransaction(block, txIndex, reexec any) *MockBrokerAPIStateAtTransactionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateAtTransaction", reflect.TypeOf((*MockBrokerAPI)(nil).StateAtTransaction), block, txIndex, reexec)
	return &MockBrokerAPIStateAtTransactionCall{Call: call}
}

// MockBrokerAPIStateAtTransactionCall wrap *gomock.Call
type MockBrokerAPIStateAtTransactionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBrokerAPIStateAtTransactionCall) Return(arg0 *core.Message, arg1 vm.BlockContext, arg2 *ledger.StateLedger, arg3 error) *MockBrokerAPIStateAtTransactionCall {
	c.Call = c.Call.Return(arg0, arg1, arg2, arg3)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBrokerAPIStateAtTransactionCall) Do(f func(*types.Block, int, uint64) (*core.Message, vm.BlockContext, *ledger.StateLedger, error)) *MockBrokerAPIStateAtTransactionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBrokerAPIStateAtTransactionCall) DoAndReturn(f func(*types.Block, int, uint64) (*core.Message, vm.BlockContext, *ledger.StateLedger, error)) *MockBrokerAPIStateAtTransactionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNetworkAPI is a mock of NetworkAPI interface.
type MockNetworkAPI struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkAPIMockRecorder
}

// MockNetworkAPIMockRecorder is the mock recorder for MockNetworkAPI.
type MockNetworkAPIMockRecorder struct {
	mock *MockNetworkAPI
}

// NewMockNetworkAPI creates a new mock instance.
func NewMockNetworkAPI(ctrl *gomock.Controller) *MockNetworkAPI {
	mock := &MockNetworkAPI{ctrl: ctrl}
	mock.recorder = &MockNetworkAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkAPI) EXPECT() *MockNetworkAPIMockRecorder {
	return m.recorder
}

// PeerInfo mocks base method.
func (m *MockNetworkAPI) PeerInfo() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeerInfo")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PeerInfo indicates an expected call of PeerInfo.
func (mr *MockNetworkAPIMockRecorder) PeerInfo() *MockNetworkAPIPeerInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeerInfo", reflect.TypeOf((*MockNetworkAPI)(nil).PeerInfo))
	return &MockNetworkAPIPeerInfoCall{Call: call}
}

// MockNetworkAPIPeerInfoCall wrap *gomock.Call
type MockNetworkAPIPeerInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkAPIPeerInfoCall) Return(arg0 []byte, arg1 error) *MockNetworkAPIPeerInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkAPIPeerInfoCall) Do(f func() ([]byte, error)) *MockNetworkAPIPeerInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkAPIPeerInfoCall) DoAndReturn(f func() ([]byte, error)) *MockNetworkAPIPeerInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockChainAPI is a mock of ChainAPI interface.
type MockChainAPI struct {
	ctrl     *gomock.Controller
	recorder *MockChainAPIMockRecorder
}

// MockChainAPIMockRecorder is the mock recorder for MockChainAPI.
type MockChainAPIMockRecorder struct {
	mock *MockChainAPI
}

// NewMockChainAPI creates a new mock instance.
func NewMockChainAPI(ctrl *gomock.Controller) *MockChainAPI {
	mock := &MockChainAPI{ctrl: ctrl}
	mock.recorder = &MockChainAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChainAPI) EXPECT() *MockChainAPIMockRecorder {
	return m.recorder
}

// Meta mocks base method.
func (m *MockChainAPI) Meta() (*types.ChainMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Meta")
	ret0, _ := ret[0].(*types.ChainMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Meta indicates an expected call of Meta.
func (mr *MockChainAPIMockRecorder) Meta() *MockChainAPIMetaCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Meta", reflect.TypeOf((*MockChainAPI)(nil).Meta))
	return &MockChainAPIMetaCall{Call: call}
}

// MockChainAPIMetaCall wrap *gomock.Call
type MockChainAPIMetaCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChainAPIMetaCall) Return(arg0 *types.ChainMeta, arg1 error) *MockChainAPIMetaCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChainAPIMetaCall) Do(f func() (*types.ChainMeta, error)) *MockChainAPIMetaCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChainAPIMetaCall) DoAndReturn(f func() (*types.ChainMeta, error)) *MockChainAPIMetaCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Status mocks base method.
func (m *MockChainAPI) Status() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(string)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockChainAPIMockRecorder) Status() *MockChainAPIStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockChainAPI)(nil).Status))
	return &MockChainAPIStatusCall{Call: call}
}

// MockChainAPIStatusCall wrap *gomock.Call
type MockChainAPIStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChainAPIStatusCall) Return(arg0 string) *MockChainAPIStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChainAPIStatusCall) Do(f func() string) *MockChainAPIStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChainAPIStatusCall) DoAndReturn(f func() string) *MockChainAPIStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TPS mocks base method.
func (m *MockChainAPI) TPS(begin, end uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TPS", begin, end)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TPS indicates an expected call of TPS.
func (mr *MockChainAPIMockRecorder) TPS(begin, end any) *MockChainAPITPSCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TPS", reflect.TypeOf((*MockChainAPI)(nil).TPS), begin, end)
	return &MockChainAPITPSCall{Call: call}
}

// MockChainAPITPSCall wrap *gomock.Call
type MockChainAPITPSCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChainAPITPSCall) Return(arg0 uint64, arg1 error) *MockChainAPITPSCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChainAPITPSCall) Do(f func(uint64, uint64) (uint64, error)) *MockChainAPITPSCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChainAPITPSCall) DoAndReturn(f func(uint64, uint64) (uint64, error)) *MockChainAPITPSCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockFeedAPI is a mock of FeedAPI interface.
type MockFeedAPI struct {
	ctrl     *gomock.Controller
	recorder *MockFeedAPIMockRecorder
}

// MockFeedAPIMockRecorder is the mock recorder for MockFeedAPI.
type MockFeedAPIMockRecorder struct {
	mock *MockFeedAPI
}

// NewMockFeedAPI creates a new mock instance.
func NewMockFeedAPI(ctrl *gomock.Controller) *MockFeedAPI {
	mock := &MockFeedAPI{ctrl: ctrl}
	mock.recorder = &MockFeedAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedAPI) EXPECT() *MockFeedAPIMockRecorder {
	return m.recorder
}

// BloomStatus mocks base method.
func (m *MockFeedAPI) BloomStatus() (uint64, uint64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BloomStatus")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint64)
	return ret0, ret1
}

// BloomStatus indicates an expected call of BloomStatus.
func (mr *MockFeedAPIMockRecorder) BloomStatus() *MockFeedAPIBloomStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BloomStatus", reflect.TypeOf((*MockFeedAPI)(nil).BloomStatus))
	return &MockFeedAPIBloomStatusCall{Call: call}
}

// MockFeedAPIBloomStatusCall wrap *gomock.Call
type MockFeedAPIBloomStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFeedAPIBloomStatusCall) Return(arg0, arg1 uint64) *MockFeedAPIBloomStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFeedAPIBloomStatusCall) Do(f func() (uint64, uint64)) *MockFeedAPIBloomStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFeedAPIBloomStatusCall) DoAndReturn(f func() (uint64, uint64)) *MockFeedAPIBloomStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SubscribeLogsEvent mocks base method.
func (m *MockFeedAPI) SubscribeLogsEvent(arg0 chan<- []*types.EvmLog) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeLogsEvent", arg0)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeLogsEvent indicates an expected call of SubscribeLogsEvent.
func (mr *MockFeedAPIMockRecorder) SubscribeLogsEvent(arg0 any) *MockFeedAPISubscribeLogsEventCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeLogsEvent", reflect.TypeOf((*MockFeedAPI)(nil).SubscribeLogsEvent), arg0)
	return &MockFeedAPISubscribeLogsEventCall{Call: call}
}

// MockFeedAPISubscribeLogsEventCall wrap *gomock.Call
type MockFeedAPISubscribeLogsEventCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFeedAPISubscribeLogsEventCall) Return(arg0 event.Subscription) *MockFeedAPISubscribeLogsEventCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFeedAPISubscribeLogsEventCall) Do(f func(chan<- []*types.EvmLog) event.Subscription) *MockFeedAPISubscribeLogsEventCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFeedAPISubscribeLogsEventCall) DoAndReturn(f func(chan<- []*types.EvmLog) event.Subscription) *MockFeedAPISubscribeLogsEventCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SubscribeNewBlockEvent mocks base method.
func (m *MockFeedAPI) SubscribeNewBlockEvent(arg0 chan<- events.ExecutedEvent) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeNewBlockEvent", arg0)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeNewBlockEvent indicates an expected call of SubscribeNewBlockEvent.
func (mr *MockFeedAPIMockRecorder) SubscribeNewBlockEvent(arg0 any) *MockFeedAPISubscribeNewBlockEventCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeNewBlockEvent", reflect.TypeOf((*MockFeedAPI)(nil).SubscribeNewBlockEvent), arg0)
	return &MockFeedAPISubscribeNewBlockEventCall{Call: call}
}

// MockFeedAPISubscribeNewBlockEventCall wrap *gomock.Call
type MockFeedAPISubscribeNewBlockEventCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFeedAPISubscribeNewBlockEventCall) Return(arg0 event.Subscription) *MockFeedAPISubscribeNewBlockEventCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFeedAPISubscribeNewBlockEventCall) Do(f func(chan<- events.ExecutedEvent) event.Subscription) *MockFeedAPISubscribeNewBlockEventCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFeedAPISubscribeNewBlockEventCall) DoAndReturn(f func(chan<- events.ExecutedEvent) event.Subscription) *MockFeedAPISubscribeNewBlockEventCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SubscribeNewTxEvent mocks base method.
func (m *MockFeedAPI) SubscribeNewTxEvent(arg0 chan<- []*types.Transaction) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeNewTxEvent", arg0)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeNewTxEvent indicates an expected call of SubscribeNewTxEvent.
func (mr *MockFeedAPIMockRecorder) SubscribeNewTxEvent(arg0 any) *MockFeedAPISubscribeNewTxEventCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeNewTxEvent", reflect.TypeOf((*MockFeedAPI)(nil).SubscribeNewTxEvent), arg0)
	return &MockFeedAPISubscribeNewTxEventCall{Call: call}
}

// MockFeedAPISubscribeNewTxEventCall wrap *gomock.Call
type MockFeedAPISubscribeNewTxEventCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFeedAPISubscribeNewTxEventCall) Return(arg0 event.Subscription) *MockFeedAPISubscribeNewTxEventCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFeedAPISubscribeNewTxEventCall) Do(f func(chan<- []*types.Transaction) event.Subscription) *MockFeedAPISubscribeNewTxEventCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFeedAPISubscribeNewTxEventCall) DoAndReturn(f func(chan<- []*types.Transaction) event.Subscription) *MockFeedAPISubscribeNewTxEventCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockGasAPI is a mock of GasAPI interface.
type MockGasAPI struct {
	ctrl     *gomock.Controller
	recorder *MockGasAPIMockRecorder
}

// MockGasAPIMockRecorder is the mock recorder for MockGasAPI.
type MockGasAPIMockRecorder struct {
	mock *MockGasAPI
}

// NewMockGasAPI creates a new mock instance.
func NewMockGasAPI(ctrl *gomock.Controller) *MockGasAPI {
	mock := &MockGasAPI{ctrl: ctrl}
	mock.recorder = &MockGasAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGasAPI) EXPECT() *MockGasAPIMockRecorder {
	return m.recorder
}

// FeeHistory mocks base method.
func (m *MockGasAPI) FeeHistory(ctx context.Context, blockCount, lastBlock uint64, rewardPercentiles []float64) (*big.Int, [][]*big.Int, []*big.Int, []float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeeHistory", ctx, blockCount, lastBlock, rewardPercentiles)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].([][]*big.Int)
	ret2, _ := ret[2].([]*big.Int)
	ret3, _ := ret[3].([]float64)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// FeeHistory indicates an expected call of FeeHistory.
func (mr *MockGasAPIMockRecorder) FeeHistory(ctx, blockCount, lastBlock, rewardPercentiles any) *MockGasAPIFeeHistoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeeHistory", reflect.TypeOf((*MockGasAPI)(nil).FeeHistory), ctx, blockCount, lastBlock, rewardPercentiles)
	return &MockGasAPIFeeHistoryCall{Call: call}
}

// MockGasAPIFeeHistoryCall wrap *gomock.Call
type MockGasAPIFeeHistoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGasAPIFeeHistoryCall) Return(arg0 *big.Int, arg1 [][]*big.Int, arg2 []*big.Int, arg3 []float64, arg4 error) *MockGasAPIFeeHistoryCall {
	c.Call = c.Call.Return(arg0, arg1, arg2, arg3, arg4)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGasAPIFeeHistoryCall) Do(f func(context.Context, uint64, uint64, []float64) (*big.Int, [][]*big.Int, []*big.Int, []float64, error)) *MockGasAPIFeeHistoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGasAPIFeeHistoryCall) DoAndReturn(f func(context.Context, uint64, uint64, []float64) (*big.Int, [][]*big.Int, []*big.Int, []float64, error)) *MockGasAPIFeeHistoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCurrentGasPrice mocks base method.
func (m *MockGasAPI) GetCurrentGasPrice(blockHeight uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentGasPrice", blockHeight)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentGasPrice indicates an expected call of GetCurrentGasPrice.
func (mr *MockGasAPIMockRecorder) GetCurrentGasPrice(blockHeight any) *MockGasAPIGetCurrentGasPriceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentGasPrice", reflect.TypeOf((*MockGasAPI)(nil).GetCurrentGasPrice), blockHeight)
	return &MockGasAPIGetCurrentGasPriceCall{Call: call}
}

// MockGasAPIGetCurrentGasPriceCall wrap *gomock.Call
type MockGasAPIGetCurrentGasPriceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGasAPIGetCurrentGasPriceCall) Return(arg0 uint64, arg1 error) *MockGasAPIGetCurrentGasPriceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGasAPIGetCurrentGasPriceCall) Do(f func(uint64) (uint64, error)) *MockGasAPIGetCurrentGasPriceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGasAPIGetCurrentGasPriceCall) DoAndReturn(f func(uint64) (uint64, error)) *MockGasAPIGetCurrentGasPriceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGasPrice mocks base method.
func (m *MockGasAPI) GetGasPrice() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasPrice")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGasPrice indicates an expected call of GetGasPrice.
func (mr *MockGasAPIMockRecorder) GetGasPrice() *MockGasAPIGetGasPriceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasPrice", reflect.TypeOf((*MockGasAPI)(nil).GetGasPrice))
	return &MockGasAPIGetGasPriceCall{Call: call}
}

// MockGasAPIGetGasPriceCall wrap *gomock.Call
type MockGasAPIGetGasPriceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGasAPIGetGasPriceCall) Return(arg0 uint64, arg1 error) *MockGasAPIGetGasPriceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGasAPIGetGasPriceCall) Do(f func() (uint64, error)) *MockGasAPIGetGasPriceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGasAPIGetGasPriceCall) DoAndReturn(f func() (uint64, error)) *MockGasAPIGetGasPriceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SuggestGasTipCap mocks base method.
func (m *MockGasAPI) SuggestGasTipCap(ctx context.Context) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuggestGasTipCap", ctx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuggestGasTipCap indicates an expected call of SuggestGasTipCap.
func (mr *MockGasAPIMockRecorder) SuggestGasTipCap(ctx any) *MockGasAPISuggestGasTipCapCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuggestGasTipCap", reflect.TypeOf((*MockGasAPI)(nil).SuggestGasTipCap), ctx)
	return &MockGasAPISuggestGasTipCapCall{Call: call}
}

// MockGasAPISuggestGasTipCapCall wrap *gomock.Call
type MockGasAPISuggestGasTipCapCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGasAPISuggestGasTipCapCall) Return(arg0 *big.Int, arg1 error) *MockGasAPISuggestGasTipCapCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGasAPISuggestGasTipCapCall) Do(f func(context.Context) (*big.Int, error)) *MockGasAPISuggestGasTipCapCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGasAPISuggestGasTipCapCall) DoAndReturn(f func(context.Context) (*big.Int, error)) *MockGasAPISuggestGasTipCapCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTxPoolAPI is a mock of TxPoolAPI interface.
type MockTxPoolAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTxPoolAPIMockRecorder
}

// MockTxPoolAPIMockRecorder is the mock recorder for MockTxPoolAPI.
type MockTxPoolAPIMockRecorder struct {
	mock *MockTxPoolAPI
}

// NewMockTxPoolAPI creates a new mock instance.
func NewMockTxPoolAPI(ctrl *gomock.Controller) *MockTxPoolAPI {
	mock := &MockTxPoolAPI{ctrl: ctrl}
	mock.recorder = &MockTxPoolAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxPoolAPI) EXPECT() *MockTxPoolAPIMockRecorder {
	return m.recorder
}

// GetAccountMeta mocks base method.
func (m *MockTxPoolAPI) GetAccountMeta(account string, full bool) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountMeta", account, full)
	ret0, _ := ret[0].(any)
	return ret0
}

// GetAccountMeta indicates an expected call of GetAccountMeta.
func (mr *MockTxPoolAPIMockRecorder) GetAccountMeta(account, full any) *MockTxPoolAPIGetAccountMetaCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountMeta", reflect.TypeOf((*MockTxPoolAPI)(nil).GetAccountMeta), account, full)
	return &MockTxPoolAPIGetAccountMetaCall{Call: call}
}

// MockTxPoolAPIGetAccountMetaCall wrap *gomock.Call
type MockTxPoolAPIGetAccountMetaCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTxPoolAPIGetAccountMetaCall) Return(arg0 any) *MockTxPoolAPIGetAccountMetaCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTxPoolAPIGetAccountMetaCall) Do(f func(string, bool) any) *MockTxPoolAPIGetAccountMetaCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTxPoolAPIGetAccountMetaCall) DoAndReturn(f func(string, bool) any) *MockTxPoolAPIGetAccountMetaCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetChainInfo mocks base method.
func (m *MockTxPoolAPI) GetChainInfo() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainInfo")
	ret0, _ := ret[0].(any)
	return ret0
}

// GetChainInfo indicates an expected call of GetChainInfo.
func (mr *MockTxPoolAPIMockRecorder) GetChainInfo() *MockTxPoolAPIGetChainInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainInfo", reflect.TypeOf((*MockTxPoolAPI)(nil).GetChainInfo))
	return &MockTxPoolAPIGetChainInfoCall{Call: call}
}

// MockTxPoolAPIGetChainInfoCall wrap *gomock.Call
type MockTxPoolAPIGetChainInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTxPoolAPIGetChainInfoCall) Return(arg0 any) *MockTxPoolAPIGetChainInfoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTxPoolAPIGetChainInfoCall) Do(f func() any) *MockTxPoolAPIGetChainInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTxPoolAPIGetChainInfoCall) DoAndReturn(f func() any) *MockTxPoolAPIGetChainInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMeta mocks base method.
func (m *MockTxPoolAPI) GetMeta(full bool) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeta", full)
	ret0, _ := ret[0].(any)
	return ret0
}

// GetMeta indicates an expected call of GetMeta.
func (mr *MockTxPoolAPIMockRecorder) GetMeta(full any) *MockTxPoolAPIGetMetaCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeta", reflect.TypeOf((*MockTxPoolAPI)(nil).GetMeta), full)
	return &MockTxPoolAPIGetMetaCall{Call: call}
}

// MockTxPoolAPIGetMetaCall wrap *gomock.Call
type MockTxPoolAPIGetMetaCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTxPoolAPIGetMetaCall) Return(arg0 any) *MockTxPoolAPIGetMetaCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTxPoolAPIGetMetaCall) Do(f func(bool) any) *MockTxPoolAPIGetMetaCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTxPoolAPIGetMetaCall) DoAndReturn(f func(bool) any) *MockTxPoolAPIGetMetaCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPendingTxCountByAccount mocks base method.
func (m *MockTxPoolAPI) GetPendingTxCountByAccount(account string) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingTxCountByAccount", account)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetPendingTxCountByAccount indicates an expected call of GetPendingTxCountByAccount.
func (mr *MockTxPoolAPIMockRecorder) GetPendingTxCountByAccount(account any) *MockTxPoolAPIGetPendingTxCountByAccountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingTxCountByAccount", reflect.TypeOf((*MockTxPoolAPI)(nil).GetPendingTxCountByAccount), account)
	return &MockTxPoolAPIGetPendingTxCountByAccountCall{Call: call}
}

// MockTxPoolAPIGetPendingTxCountByAccountCall wrap *gomock.Call
type MockTxPoolAPIGetPendingTxCountByAccountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTxPoolAPIGetPendingTxCountByAccountCall) Return(arg0 uint64) *MockTxPoolAPIGetPendingTxCountByAccountCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTxPoolAPIGetPendingTxCountByAccountCall) Do(f func(string) uint64) *MockTxPoolAPIGetPendingTxCountByAccountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTxPoolAPIGetPendingTxCountByAccountCall) DoAndReturn(f func(string) uint64) *MockTxPoolAPIGetPendingTxCountByAccountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTotalPendingTxCount mocks base method.
func (m *MockTxPoolAPI) GetTotalPendingTxCount() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalPendingTxCount")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetTotalPendingTxCount indicates an expected call of GetTotalPendingTxCount.
func (mr *MockTxPoolAPIMockRecorder) GetTotalPendingTxCount() *MockTxPoolAPIGetTotalPendingTxCountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalPendingTxCount", reflect.TypeOf((*MockTxPoolAPI)(nil).GetTotalPendingTxCount))
	return &MockTxPoolAPIGetTotalPendingTxCountCall{Call: call}
}

// MockTxPoolAPIGetTotalPendingTxCountCall wrap *gomock.Call
type MockTxPoolAPIGetTotalPendingTxCountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTxPoolAPIGetTotalPendingTxCountCall) Return(arg0 uint64) *MockTxPoolAPIGetTotalPendingTxCountCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTxPoolAPIGetTotalPendingTxCountCall) Do(f func() uint64) *MockTxPoolAPIGetTotalPendingTxCountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTxPoolAPIGetTotalPendingTxCountCall) DoAndReturn(f func() uint64) *MockTxPoolAPIGetTotalPendingTxCountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTransaction mocks base method.
func (m *MockTxPoolAPI) GetTransaction(hash *types.Hash) *types.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", hash)
	ret0, _ := ret[0].(*types.Transaction)
	return ret0
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockTxPoolAPIMockRecorder) GetTransaction(hash any) *MockTxPoolAPIGetTransactionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockTxPoolAPI)(nil).GetTransaction), hash)
	return &MockTxPoolAPIGetTransactionCall{Call: call}
}

// MockTxPoolAPIGetTransactionCall wrap *gomock.Call
type MockTxPoolAPIGetTransactionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTxPoolAPIGetTransactionCall) Return(arg0 *types.Transaction) *MockTxPoolAPIGetTransactionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTxPoolAPIGetTransactionCall) Do(f func(*types.Hash) *types.Transaction) *MockTxPoolAPIGetTransactionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTxPoolAPIGetTransactionCall) DoAndReturn(f func(*types.Hash) *types.Transaction) *MockTxPoolAPIGetTransactionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsStarted mocks base method.
func (m *MockTxPoolAPI) IsStarted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStarted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStarted indicates an expected call of IsStarted.
func (mr *MockTxPoolAPIMockRecorder) IsStarted() *MockTxPoolAPIIsStartedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStarted", reflect.TypeOf((*MockTxPoolAPI)(nil).IsStarted))
	return &MockTxPoolAPIIsStartedCall{Call: call}
}

// MockTxPoolAPIIsStartedCall wrap *gomock.Call
type MockTxPoolAPIIsStartedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTxPoolAPIIsStartedCall) Return(arg0 bool) *MockTxPoolAPIIsStartedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTxPoolAPIIsStartedCall) Do(f func() bool) *MockTxPoolAPIIsStartedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTxPoolAPIIsStartedCall) DoAndReturn(f func() bool) *MockTxPoolAPIIsStartedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
