// Code generated by MockGen. DO NOT EDIT.
// Source: api.go
//
// Generated by this command:
//
//	mockgen -destination mock_api/mock_api.go -package mock_api -source api.go -typed
//

// Package mock_api is a generated GoMock package.
package mock_api

import (
	reflect "reflect"

	types "github.com/axiomesh/axiom-kit/types"
	api "github.com/axiomesh/axiom-ledger/internal/coreapi/api"
	common "github.com/axiomesh/axiom-ledger/internal/executor/system/common"
	ledger "github.com/axiomesh/axiom-ledger/internal/ledger"
	events "github.com/axiomesh/axiom-ledger/pkg/events"
	core "github.com/ethereum/go-ethereum/core"
	vm "github.com/ethereum/go-ethereum/core/vm"
	event "github.com/ethereum/go-ethereum/event"
	params "github.com/ethereum/go-ethereum/params"
	gomock "go.uber.org/mock/gomock"
)

// MockCoreAPI is a mock of CoreAPI interface.
type MockCoreAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCoreAPIMockRecorder
}

// MockCoreAPIMockRecorder is the mock recorder for MockCoreAPI.
type MockCoreAPIMockRecorder struct {
	mock *MockCoreAPI
}

// NewMockCoreAPI creates a new mock instance.
func NewMockCoreAPI(ctrl *gomock.Controller) *MockCoreAPI {
	mock := &MockCoreAPI{ctrl: ctrl}
	mock.recorder = &MockCoreAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoreAPI) EXPECT() *MockCoreAPIMockRecorder {
	return m.recorder
}

// Broker mocks base method.
func (m *MockCoreAPI) Broker() api.BrokerAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Broker")
	ret0, _ := ret[0].(api.BrokerAPI)
	return ret0
}

// Broker indicates an expected call of Broker.
func (mr *MockCoreAPIMockRecorder) Broker() *CoreAPIBrokerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broker", reflect.TypeOf((*MockCoreAPI)(nil).Broker))
	return &CoreAPIBrokerCall{Call: call}
}

// CoreAPIBrokerCall wrap *gomock.Call
type CoreAPIBrokerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CoreAPIBrokerCall) Return(arg0 api.BrokerAPI) *CoreAPIBrokerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CoreAPIBrokerCall) Do(f func() api.BrokerAPI) *CoreAPIBrokerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CoreAPIBrokerCall) DoAndReturn(f func() api.BrokerAPI) *CoreAPIBrokerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Chain mocks base method.
func (m *MockCoreAPI) Chain() api.ChainAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chain")
	ret0, _ := ret[0].(api.ChainAPI)
	return ret0
}

// Chain indicates an expected call of Chain.
func (mr *MockCoreAPIMockRecorder) Chain() *CoreAPIChainCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chain", reflect.TypeOf((*MockCoreAPI)(nil).Chain))
	return &CoreAPIChainCall{Call: call}
}

// CoreAPIChainCall wrap *gomock.Call
type CoreAPIChainCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CoreAPIChainCall) Return(arg0 api.ChainAPI) *CoreAPIChainCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CoreAPIChainCall) Do(f func() api.ChainAPI) *CoreAPIChainCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CoreAPIChainCall) DoAndReturn(f func() api.ChainAPI) *CoreAPIChainCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Feed mocks base method.
func (m *MockCoreAPI) Feed() api.FeedAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Feed")
	ret0, _ := ret[0].(api.FeedAPI)
	return ret0
}

// Feed indicates an expected call of Feed.
func (mr *MockCoreAPIMockRecorder) Feed() *CoreAPIFeedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Feed", reflect.TypeOf((*MockCoreAPI)(nil).Feed))
	return &CoreAPIFeedCall{Call: call}
}

// CoreAPIFeedCall wrap *gomock.Call
type CoreAPIFeedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CoreAPIFeedCall) Return(arg0 api.FeedAPI) *CoreAPIFeedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CoreAPIFeedCall) Do(f func() api.FeedAPI) *CoreAPIFeedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CoreAPIFeedCall) DoAndReturn(f func() api.FeedAPI) *CoreAPIFeedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Gas mocks base method.
func (m *MockCoreAPI) Gas() api.GasAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gas")
	ret0, _ := ret[0].(api.GasAPI)
	return ret0
}

// Gas indicates an expected call of Gas.
func (mr *MockCoreAPIMockRecorder) Gas() *CoreAPIGasCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gas", reflect.TypeOf((*MockCoreAPI)(nil).Gas))
	return &CoreAPIGasCall{Call: call}
}

// CoreAPIGasCall wrap *gomock.Call
type CoreAPIGasCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CoreAPIGasCall) Return(arg0 api.GasAPI) *CoreAPIGasCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CoreAPIGasCall) Do(f func() api.GasAPI) *CoreAPIGasCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CoreAPIGasCall) DoAndReturn(f func() api.GasAPI) *CoreAPIGasCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TxPool mocks base method.
func (m *MockCoreAPI) TxPool() api.TxPoolAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxPool")
	ret0, _ := ret[0].(api.TxPoolAPI)
	return ret0
}

// TxPool indicates an expected call of TxPool.
func (mr *MockCoreAPIMockRecorder) TxPool() *CoreAPITxPoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxPool", reflect.TypeOf((*MockCoreAPI)(nil).TxPool))
	return &CoreAPITxPoolCall{Call: call}
}

// CoreAPITxPoolCall wrap *gomock.Call
type CoreAPITxPoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CoreAPITxPoolCall) Return(arg0 api.TxPoolAPI) *CoreAPITxPoolCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CoreAPITxPoolCall) Do(f func() api.TxPoolAPI) *CoreAPITxPoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CoreAPITxPoolCall) DoAndReturn(f func() api.TxPoolAPI) *CoreAPITxPoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockBrokerAPI is a mock of BrokerAPI interface.
type MockBrokerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerAPIMockRecorder
}

// MockBrokerAPIMockRecorder is the mock recorder for MockBrokerAPI.
type MockBrokerAPIMockRecorder struct {
	mock *MockBrokerAPI
}

// NewMockBrokerAPI creates a new mock instance.
func NewMockBrokerAPI(ctrl *gomock.Controller) *MockBrokerAPI {
	mock := &MockBrokerAPI{ctrl: ctrl}
	mock.recorder = &MockBrokerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrokerAPI) EXPECT() *MockBrokerAPIMockRecorder {
	return m.recorder
}

// ChainConfig mocks base method.
func (m *MockBrokerAPI) ChainConfig() *params.ChainConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainConfig")
	ret0, _ := ret[0].(*params.ChainConfig)
	return ret0
}

// ChainConfig indicates an expected call of ChainConfig.
func (mr *MockBrokerAPIMockRecorder) ChainConfig() *BrokerAPIChainConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainConfig", reflect.TypeOf((*MockBrokerAPI)(nil).ChainConfig))
	return &BrokerAPIChainConfigCall{Call: call}
}

// BrokerAPIChainConfigCall wrap *gomock.Call
type BrokerAPIChainConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *BrokerAPIChainConfigCall) Return(arg0 *params.ChainConfig) *BrokerAPIChainConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *BrokerAPIChainConfigCall) Do(f func() *params.ChainConfig) *BrokerAPIChainConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *BrokerAPIChainConfigCall) DoAndReturn(f func() *params.ChainConfig) *BrokerAPIChainConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ConsensusReady mocks base method.
func (m *MockBrokerAPI) ConsensusReady() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsensusReady")
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsensusReady indicates an expected call of ConsensusReady.
func (mr *MockBrokerAPIMockRecorder) ConsensusReady() *BrokerAPIConsensusReadyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsensusReady", reflect.TypeOf((*MockBrokerAPI)(nil).ConsensusReady))
	return &BrokerAPIConsensusReadyCall{Call: call}
}

// BrokerAPIConsensusReadyCall wrap *gomock.Call
type BrokerAPIConsensusReadyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *BrokerAPIConsensusReadyCall) Return(arg0 error) *BrokerAPIConsensusReadyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *BrokerAPIConsensusReadyCall) Do(f func() error) *BrokerAPIConsensusReadyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *BrokerAPIConsensusReadyCall) DoAndReturn(f func() error) *BrokerAPIConsensusReadyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBlock mocks base method.
func (m *MockBrokerAPI) GetBlock(mode, key string) (*types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", mode, key)
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockBrokerAPIMockRecorder) GetBlock(mode, key any) *BrokerAPIGetBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockBrokerAPI)(nil).GetBlock), mode, key)
	return &BrokerAPIGetBlockCall{Call: call}
}

// BrokerAPIGetBlockCall wrap *gomock.Call
type BrokerAPIGetBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *BrokerAPIGetBlockCall) Return(arg0 *types.Block, arg1 error) *BrokerAPIGetBlockCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *BrokerAPIGetBlockCall) Do(f func(string, string) (*types.Block, error)) *BrokerAPIGetBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *BrokerAPIGetBlockCall) DoAndReturn(f func(string, string) (*types.Block, error)) *BrokerAPIGetBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBlockHeaders mocks base method.
func (m *MockBrokerAPI) GetBlockHeaders(start, end uint64) ([]*types.BlockHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHeaders", start, end)
	ret0, _ := ret[0].([]*types.BlockHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHeaders indicates an expected call of GetBlockHeaders.
func (mr *MockBrokerAPIMockRecorder) GetBlockHeaders(start, end any) *BrokerAPIGetBlockHeadersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHeaders", reflect.TypeOf((*MockBrokerAPI)(nil).GetBlockHeaders), start, end)
	return &BrokerAPIGetBlockHeadersCall{Call: call}
}

// BrokerAPIGetBlockHeadersCall wrap *gomock.Call
type BrokerAPIGetBlockHeadersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *BrokerAPIGetBlockHeadersCall) Return(arg0 []*types.BlockHeader, arg1 error) *BrokerAPIGetBlockHeadersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *BrokerAPIGetBlockHeadersCall) Do(f func(uint64, uint64) ([]*types.BlockHeader, error)) *BrokerAPIGetBlockHeadersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *BrokerAPIGetBlockHeadersCall) DoAndReturn(f func(uint64, uint64) ([]*types.BlockHeader, error)) *BrokerAPIGetBlockHeadersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBlocks mocks base method.
func (m *MockBrokerAPI) GetBlocks(start, end uint64) ([]*types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlocks", start, end)
	ret0, _ := ret[0].([]*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlocks indicates an expected call of GetBlocks.
func (mr *MockBrokerAPIMockRecorder) GetBlocks(start, end any) *BrokerAPIGetBlocksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlocks", reflect.TypeOf((*MockBrokerAPI)(nil).GetBlocks), start, end)
	return &BrokerAPIGetBlocksCall{Call: call}
}

// BrokerAPIGetBlocksCall wrap *gomock.Call
type BrokerAPIGetBlocksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *BrokerAPIGetBlocksCall) Return(arg0 []*types.Block, arg1 error) *BrokerAPIGetBlocksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *BrokerAPIGetBlocksCall) Do(f func(uint64, uint64) ([]*types.Block, error)) *BrokerAPIGetBlocksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *BrokerAPIGetBlocksCall) DoAndReturn(f func(uint64, uint64) ([]*types.Block, error)) *BrokerAPIGetBlocksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetEvm mocks base method.
func (m *MockBrokerAPI) GetEvm(mes *core.Message, vmConfig *vm.Config) (*vm.EVM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvm", mes, vmConfig)
	ret0, _ := ret[0].(*vm.EVM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvm indicates an expected call of GetEvm.
func (mr *MockBrokerAPIMockRecorder) GetEvm(mes, vmConfig any) *BrokerAPIGetEvmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvm", reflect.TypeOf((*MockBrokerAPI)(nil).GetEvm), mes, vmConfig)
	return &BrokerAPIGetEvmCall{Call: call}
}

// BrokerAPIGetEvmCall wrap *gomock.Call
type BrokerAPIGetEvmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *BrokerAPIGetEvmCall) Return(arg0 *vm.EVM, arg1 error) *BrokerAPIGetEvmCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *BrokerAPIGetEvmCall) Do(f func(*core.Message, *vm.Config) (*vm.EVM, error)) *BrokerAPIGetEvmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *BrokerAPIGetEvmCall) DoAndReturn(f func(*core.Message, *vm.Config) (*vm.EVM, error)) *BrokerAPIGetEvmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNativeVm mocks base method.
func (m *MockBrokerAPI) GetNativeVm() common.VirtualMachine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNativeVm")
	ret0, _ := ret[0].(common.VirtualMachine)
	return ret0
}

// GetNativeVm indicates an expected call of GetNativeVm.
func (mr *MockBrokerAPIMockRecorder) GetNativeVm() *BrokerAPIGetNativeVmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNativeVm", reflect.TypeOf((*MockBrokerAPI)(nil).GetNativeVm))
	return &BrokerAPIGetNativeVmCall{Call: call}
}

// BrokerAPIGetNativeVmCall wrap *gomock.Call
type BrokerAPIGetNativeVmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *BrokerAPIGetNativeVmCall) Return(arg0 common.VirtualMachine) *BrokerAPIGetNativeVmCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *BrokerAPIGetNativeVmCall) Do(f func() common.VirtualMachine) *BrokerAPIGetNativeVmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *BrokerAPIGetNativeVmCall) DoAndReturn(f func() common.VirtualMachine) *BrokerAPIGetNativeVmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetReceipt mocks base method.
func (m *MockBrokerAPI) GetReceipt(arg0 *types.Hash) (*types.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceipt", arg0)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceipt indicates an expected call of GetReceipt.
func (mr *MockBrokerAPIMockRecorder) GetReceipt(arg0 any) *BrokerAPIGetReceiptCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceipt", reflect.TypeOf((*MockBrokerAPI)(nil).GetReceipt), arg0)
	return &BrokerAPIGetReceiptCall{Call: call}
}

// BrokerAPIGetReceiptCall wrap *gomock.Call
type BrokerAPIGetReceiptCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *BrokerAPIGetReceiptCall) Return(arg0 *types.Receipt, arg1 error) *BrokerAPIGetReceiptCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *BrokerAPIGetReceiptCall) Do(f func(*types.Hash) (*types.Receipt, error)) *BrokerAPIGetReceiptCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *BrokerAPIGetReceiptCall) DoAndReturn(f func(*types.Hash) (*types.Receipt, error)) *BrokerAPIGetReceiptCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTransaction mocks base method.
func (m *MockBrokerAPI) GetTransaction(arg0 *types.Hash) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", arg0)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockBrokerAPIMockRecorder) GetTransaction(arg0 any) *BrokerAPIGetTransactionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockBrokerAPI)(nil).GetTransaction), arg0)
	return &BrokerAPIGetTransactionCall{Call: call}
}

// BrokerAPIGetTransactionCall wrap *gomock.Call
type BrokerAPIGetTransactionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *BrokerAPIGetTransactionCall) Return(arg0 *types.Transaction, arg1 error) *BrokerAPIGetTransactionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *BrokerAPIGetTransactionCall) Do(f func(*types.Hash) (*types.Transaction, error)) *BrokerAPIGetTransactionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *BrokerAPIGetTransactionCall) DoAndReturn(f func(*types.Hash) (*types.Transaction, error)) *BrokerAPIGetTransactionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTransactionMeta mocks base method.
func (m *MockBrokerAPI) GetTransactionMeta(arg0 *types.Hash) (*types.TransactionMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionMeta", arg0)
	ret0, _ := ret[0].(*types.TransactionMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionMeta indicates an expected call of GetTransactionMeta.
func (mr *MockBrokerAPIMockRecorder) GetTransactionMeta(arg0 any) *BrokerAPIGetTransactionMetaCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionMeta", reflect.TypeOf((*MockBrokerAPI)(nil).GetTransactionMeta), arg0)
	return &BrokerAPIGetTransactionMetaCall{Call: call}
}

// BrokerAPIGetTransactionMetaCall wrap *gomock.Call
type BrokerAPIGetTransactionMetaCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *BrokerAPIGetTransactionMetaCall) Return(arg0 *types.TransactionMeta, arg1 error) *BrokerAPIGetTransactionMetaCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *BrokerAPIGetTransactionMetaCall) Do(f func(*types.Hash) (*types.TransactionMeta, error)) *BrokerAPIGetTransactionMetaCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *BrokerAPIGetTransactionMetaCall) DoAndReturn(f func(*types.Hash) (*types.TransactionMeta, error)) *BrokerAPIGetTransactionMetaCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetViewStateLedger mocks base method.
func (m *MockBrokerAPI) GetViewStateLedger() ledger.StateLedger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetViewStateLedger")
	ret0, _ := ret[0].(ledger.StateLedger)
	return ret0
}

// GetViewStateLedger indicates an expected call of GetViewStateLedger.
func (mr *MockBrokerAPIMockRecorder) GetViewStateLedger() *BrokerAPIGetViewStateLedgerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetViewStateLedger", reflect.TypeOf((*MockBrokerAPI)(nil).GetViewStateLedger))
	return &BrokerAPIGetViewStateLedgerCall{Call: call}
}

// BrokerAPIGetViewStateLedgerCall wrap *gomock.Call
type BrokerAPIGetViewStateLedgerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *BrokerAPIGetViewStateLedgerCall) Return(arg0 ledger.StateLedger) *BrokerAPIGetViewStateLedgerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *BrokerAPIGetViewStateLedgerCall) Do(f func() ledger.StateLedger) *BrokerAPIGetViewStateLedgerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *BrokerAPIGetViewStateLedgerCall) DoAndReturn(f func() ledger.StateLedger) *BrokerAPIGetViewStateLedgerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HandleTransaction mocks base method.
func (m *MockBrokerAPI) HandleTransaction(tx *types.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleTransaction", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleTransaction indicates an expected call of HandleTransaction.
func (mr *MockBrokerAPIMockRecorder) HandleTransaction(tx any) *BrokerAPIHandleTransactionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTransaction", reflect.TypeOf((*MockBrokerAPI)(nil).HandleTransaction), tx)
	return &BrokerAPIHandleTransactionCall{Call: call}
}

// BrokerAPIHandleTransactionCall wrap *gomock.Call
type BrokerAPIHandleTransactionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *BrokerAPIHandleTransactionCall) Return(arg0 error) *BrokerAPIHandleTransactionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *BrokerAPIHandleTransactionCall) Do(f func(*types.Transaction) error) *BrokerAPIHandleTransactionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *BrokerAPIHandleTransactionCall) DoAndReturn(f func(*types.Transaction) error) *BrokerAPIHandleTransactionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StateAtTransaction mocks base method.
func (m *MockBrokerAPI) StateAtTransaction(block *types.Block, txIndex int, reexec uint64) (*core.Message, vm.BlockContext, *ledger.StateLedger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateAtTransaction", block, txIndex, reexec)
	ret0, _ := ret[0].(*core.Message)
	ret1, _ := ret[1].(vm.BlockContext)
	ret2, _ := ret[2].(*ledger.StateLedger)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// StateAtTransaction indicates an expected call of StateAtTransaction.
func (mr *MockBrokerAPIMockRecorder) StateAtTransaction(block, txIndex, reexec any) *BrokerAPIStateAtTransactionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateAtTransaction", reflect.TypeOf((*MockBrokerAPI)(nil).StateAtTransaction), block, txIndex, reexec)
	return &BrokerAPIStateAtTransactionCall{Call: call}
}

// BrokerAPIStateAtTransactionCall wrap *gomock.Call
type BrokerAPIStateAtTransactionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *BrokerAPIStateAtTransactionCall) Return(arg0 *core.Message, arg1 vm.BlockContext, arg2 *ledger.StateLedger, arg3 error) *BrokerAPIStateAtTransactionCall {
	c.Call = c.Call.Return(arg0, arg1, arg2, arg3)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *BrokerAPIStateAtTransactionCall) Do(f func(*types.Block, int, uint64) (*core.Message, vm.BlockContext, *ledger.StateLedger, error)) *BrokerAPIStateAtTransactionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *BrokerAPIStateAtTransactionCall) DoAndReturn(f func(*types.Block, int, uint64) (*core.Message, vm.BlockContext, *ledger.StateLedger, error)) *BrokerAPIStateAtTransactionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNetworkAPI is a mock of NetworkAPI interface.
type MockNetworkAPI struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkAPIMockRecorder
}

// MockNetworkAPIMockRecorder is the mock recorder for MockNetworkAPI.
type MockNetworkAPIMockRecorder struct {
	mock *MockNetworkAPI
}

// NewMockNetworkAPI creates a new mock instance.
func NewMockNetworkAPI(ctrl *gomock.Controller) *MockNetworkAPI {
	mock := &MockNetworkAPI{ctrl: ctrl}
	mock.recorder = &MockNetworkAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkAPI) EXPECT() *MockNetworkAPIMockRecorder {
	return m.recorder
}

// PeerInfo mocks base method.
func (m *MockNetworkAPI) PeerInfo() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeerInfo")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PeerInfo indicates an expected call of PeerInfo.
func (mr *MockNetworkAPIMockRecorder) PeerInfo() *NetworkAPIPeerInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeerInfo", reflect.TypeOf((*MockNetworkAPI)(nil).PeerInfo))
	return &NetworkAPIPeerInfoCall{Call: call}
}

// NetworkAPIPeerInfoCall wrap *gomock.Call
type NetworkAPIPeerInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *NetworkAPIPeerInfoCall) Return(arg0 []byte, arg1 error) *NetworkAPIPeerInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *NetworkAPIPeerInfoCall) Do(f func() ([]byte, error)) *NetworkAPIPeerInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *NetworkAPIPeerInfoCall) DoAndReturn(f func() ([]byte, error)) *NetworkAPIPeerInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockChainAPI is a mock of ChainAPI interface.
type MockChainAPI struct {
	ctrl     *gomock.Controller
	recorder *MockChainAPIMockRecorder
}

// MockChainAPIMockRecorder is the mock recorder for MockChainAPI.
type MockChainAPIMockRecorder struct {
	mock *MockChainAPI
}

// NewMockChainAPI creates a new mock instance.
func NewMockChainAPI(ctrl *gomock.Controller) *MockChainAPI {
	mock := &MockChainAPI{ctrl: ctrl}
	mock.recorder = &MockChainAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChainAPI) EXPECT() *MockChainAPIMockRecorder {
	return m.recorder
}

// Meta mocks base method.
func (m *MockChainAPI) Meta() (*types.ChainMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Meta")
	ret0, _ := ret[0].(*types.ChainMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Meta indicates an expected call of Meta.
func (mr *MockChainAPIMockRecorder) Meta() *ChainAPIMetaCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Meta", reflect.TypeOf((*MockChainAPI)(nil).Meta))
	return &ChainAPIMetaCall{Call: call}
}

// ChainAPIMetaCall wrap *gomock.Call
type ChainAPIMetaCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ChainAPIMetaCall) Return(arg0 *types.ChainMeta, arg1 error) *ChainAPIMetaCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ChainAPIMetaCall) Do(f func() (*types.ChainMeta, error)) *ChainAPIMetaCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ChainAPIMetaCall) DoAndReturn(f func() (*types.ChainMeta, error)) *ChainAPIMetaCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Status mocks base method.
func (m *MockChainAPI) Status() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(string)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockChainAPIMockRecorder) Status() *ChainAPIStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockChainAPI)(nil).Status))
	return &ChainAPIStatusCall{Call: call}
}

// ChainAPIStatusCall wrap *gomock.Call
type ChainAPIStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ChainAPIStatusCall) Return(arg0 string) *ChainAPIStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ChainAPIStatusCall) Do(f func() string) *ChainAPIStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ChainAPIStatusCall) DoAndReturn(f func() string) *ChainAPIStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TPS mocks base method.
func (m *MockChainAPI) TPS(begin, end uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TPS", begin, end)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TPS indicates an expected call of TPS.
func (mr *MockChainAPIMockRecorder) TPS(begin, end any) *ChainAPITPSCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TPS", reflect.TypeOf((*MockChainAPI)(nil).TPS), begin, end)
	return &ChainAPITPSCall{Call: call}
}

// ChainAPITPSCall wrap *gomock.Call
type ChainAPITPSCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ChainAPITPSCall) Return(arg0 uint64, arg1 error) *ChainAPITPSCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ChainAPITPSCall) Do(f func(uint64, uint64) (uint64, error)) *ChainAPITPSCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ChainAPITPSCall) DoAndReturn(f func(uint64, uint64) (uint64, error)) *ChainAPITPSCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockFeedAPI is a mock of FeedAPI interface.
type MockFeedAPI struct {
	ctrl     *gomock.Controller
	recorder *MockFeedAPIMockRecorder
}

// MockFeedAPIMockRecorder is the mock recorder for MockFeedAPI.
type MockFeedAPIMockRecorder struct {
	mock *MockFeedAPI
}

// NewMockFeedAPI creates a new mock instance.
func NewMockFeedAPI(ctrl *gomock.Controller) *MockFeedAPI {
	mock := &MockFeedAPI{ctrl: ctrl}
	mock.recorder = &MockFeedAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedAPI) EXPECT() *MockFeedAPIMockRecorder {
	return m.recorder
}

// BloomStatus mocks base method.
func (m *MockFeedAPI) BloomStatus() (uint64, uint64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BloomStatus")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint64)
	return ret0, ret1
}

// BloomStatus indicates an expected call of BloomStatus.
func (mr *MockFeedAPIMockRecorder) BloomStatus() *FeedAPIBloomStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BloomStatus", reflect.TypeOf((*MockFeedAPI)(nil).BloomStatus))
	return &FeedAPIBloomStatusCall{Call: call}
}

// FeedAPIBloomStatusCall wrap *gomock.Call
type FeedAPIBloomStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *FeedAPIBloomStatusCall) Return(arg0, arg1 uint64) *FeedAPIBloomStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *FeedAPIBloomStatusCall) Do(f func() (uint64, uint64)) *FeedAPIBloomStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *FeedAPIBloomStatusCall) DoAndReturn(f func() (uint64, uint64)) *FeedAPIBloomStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SubscribeLogsEvent mocks base method.
func (m *MockFeedAPI) SubscribeLogsEvent(arg0 chan<- []*types.EvmLog) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeLogsEvent", arg0)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeLogsEvent indicates an expected call of SubscribeLogsEvent.
func (mr *MockFeedAPIMockRecorder) SubscribeLogsEvent(arg0 any) *FeedAPISubscribeLogsEventCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeLogsEvent", reflect.TypeOf((*MockFeedAPI)(nil).SubscribeLogsEvent), arg0)
	return &FeedAPISubscribeLogsEventCall{Call: call}
}

// FeedAPISubscribeLogsEventCall wrap *gomock.Call
type FeedAPISubscribeLogsEventCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *FeedAPISubscribeLogsEventCall) Return(arg0 event.Subscription) *FeedAPISubscribeLogsEventCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *FeedAPISubscribeLogsEventCall) Do(f func(chan<- []*types.EvmLog) event.Subscription) *FeedAPISubscribeLogsEventCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *FeedAPISubscribeLogsEventCall) DoAndReturn(f func(chan<- []*types.EvmLog) event.Subscription) *FeedAPISubscribeLogsEventCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SubscribeNewBlockEvent mocks base method.
func (m *MockFeedAPI) SubscribeNewBlockEvent(arg0 chan<- events.ExecutedEvent) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeNewBlockEvent", arg0)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeNewBlockEvent indicates an expected call of SubscribeNewBlockEvent.
func (mr *MockFeedAPIMockRecorder) SubscribeNewBlockEvent(arg0 any) *FeedAPISubscribeNewBlockEventCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeNewBlockEvent", reflect.TypeOf((*MockFeedAPI)(nil).SubscribeNewBlockEvent), arg0)
	return &FeedAPISubscribeNewBlockEventCall{Call: call}
}

// FeedAPISubscribeNewBlockEventCall wrap *gomock.Call
type FeedAPISubscribeNewBlockEventCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *FeedAPISubscribeNewBlockEventCall) Return(arg0 event.Subscription) *FeedAPISubscribeNewBlockEventCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *FeedAPISubscribeNewBlockEventCall) Do(f func(chan<- events.ExecutedEvent) event.Subscription) *FeedAPISubscribeNewBlockEventCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *FeedAPISubscribeNewBlockEventCall) DoAndReturn(f func(chan<- events.ExecutedEvent) event.Subscription) *FeedAPISubscribeNewBlockEventCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SubscribeNewTxEvent mocks base method.
func (m *MockFeedAPI) SubscribeNewTxEvent(arg0 chan<- []*types.Transaction) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeNewTxEvent", arg0)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeNewTxEvent indicates an expected call of SubscribeNewTxEvent.
func (mr *MockFeedAPIMockRecorder) SubscribeNewTxEvent(arg0 any) *FeedAPISubscribeNewTxEventCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeNewTxEvent", reflect.TypeOf((*MockFeedAPI)(nil).SubscribeNewTxEvent), arg0)
	return &FeedAPISubscribeNewTxEventCall{Call: call}
}

// FeedAPISubscribeNewTxEventCall wrap *gomock.Call
type FeedAPISubscribeNewTxEventCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *FeedAPISubscribeNewTxEventCall) Return(arg0 event.Subscription) *FeedAPISubscribeNewTxEventCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *FeedAPISubscribeNewTxEventCall) Do(f func(chan<- []*types.Transaction) event.Subscription) *FeedAPISubscribeNewTxEventCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *FeedAPISubscribeNewTxEventCall) DoAndReturn(f func(chan<- []*types.Transaction) event.Subscription) *FeedAPISubscribeNewTxEventCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockGasAPI is a mock of GasAPI interface.
type MockGasAPI struct {
	ctrl     *gomock.Controller
	recorder *MockGasAPIMockRecorder
}

// MockGasAPIMockRecorder is the mock recorder for MockGasAPI.
type MockGasAPIMockRecorder struct {
	mock *MockGasAPI
}

// NewMockGasAPI creates a new mock instance.
func NewMockGasAPI(ctrl *gomock.Controller) *MockGasAPI {
	mock := &MockGasAPI{ctrl: ctrl}
	mock.recorder = &MockGasAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGasAPI) EXPECT() *MockGasAPIMockRecorder {
	return m.recorder
}

// GetCurrentGasPrice mocks base method.
func (m *MockGasAPI) GetCurrentGasPrice(blockHeight uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentGasPrice", blockHeight)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentGasPrice indicates an expected call of GetCurrentGasPrice.
func (mr *MockGasAPIMockRecorder) GetCurrentGasPrice(blockHeight any) *GasAPIGetCurrentGasPriceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentGasPrice", reflect.TypeOf((*MockGasAPI)(nil).GetCurrentGasPrice), blockHeight)
	return &GasAPIGetCurrentGasPriceCall{Call: call}
}

// GasAPIGetCurrentGasPriceCall wrap *gomock.Call
type GasAPIGetCurrentGasPriceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *GasAPIGetCurrentGasPriceCall) Return(arg0 uint64, arg1 error) *GasAPIGetCurrentGasPriceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *GasAPIGetCurrentGasPriceCall) Do(f func(uint64) (uint64, error)) *GasAPIGetCurrentGasPriceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *GasAPIGetCurrentGasPriceCall) DoAndReturn(f func(uint64) (uint64, error)) *GasAPIGetCurrentGasPriceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGasPrice mocks base method.
func (m *MockGasAPI) GetGasPrice() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasPrice")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGasPrice indicates an expected call of GetGasPrice.
func (mr *MockGasAPIMockRecorder) GetGasPrice() *GasAPIGetGasPriceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasPrice", reflect.TypeOf((*MockGasAPI)(nil).GetGasPrice))
	return &GasAPIGetGasPriceCall{Call: call}
}

// GasAPIGetGasPriceCall wrap *gomock.Call
type GasAPIGetGasPriceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *GasAPIGetGasPriceCall) Return(arg0 uint64, arg1 error) *GasAPIGetGasPriceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *GasAPIGetGasPriceCall) Do(f func() (uint64, error)) *GasAPIGetGasPriceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *GasAPIGetGasPriceCall) DoAndReturn(f func() (uint64, error)) *GasAPIGetGasPriceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTxPoolAPI is a mock of TxPoolAPI interface.
type MockTxPoolAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTxPoolAPIMockRecorder
}

// MockTxPoolAPIMockRecorder is the mock recorder for MockTxPoolAPI.
type MockTxPoolAPIMockRecorder struct {
	mock *MockTxPoolAPI
}

// NewMockTxPoolAPI creates a new mock instance.
func NewMockTxPoolAPI(ctrl *gomock.Controller) *MockTxPoolAPI {
	mock := &MockTxPoolAPI{ctrl: ctrl}
	mock.recorder = &MockTxPoolAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxPoolAPI) EXPECT() *MockTxPoolAPIMockRecorder {
	return m.recorder
}

// GetAccountMeta mocks base method.
func (m *MockTxPoolAPI) GetAccountMeta(account string, full bool) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountMeta", account, full)
	ret0, _ := ret[0].(any)
	return ret0
}

// GetAccountMeta indicates an expected call of GetAccountMeta.
func (mr *MockTxPoolAPIMockRecorder) GetAccountMeta(account, full any) *TxPoolAPIGetAccountMetaCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountMeta", reflect.TypeOf((*MockTxPoolAPI)(nil).GetAccountMeta), account, full)
	return &TxPoolAPIGetAccountMetaCall{Call: call}
}

// TxPoolAPIGetAccountMetaCall wrap *gomock.Call
type TxPoolAPIGetAccountMetaCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TxPoolAPIGetAccountMetaCall) Return(arg0 any) *TxPoolAPIGetAccountMetaCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TxPoolAPIGetAccountMetaCall) Do(f func(string, bool) any) *TxPoolAPIGetAccountMetaCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TxPoolAPIGetAccountMetaCall) DoAndReturn(f func(string, bool) any) *TxPoolAPIGetAccountMetaCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMeta mocks base method.
func (m *MockTxPoolAPI) GetMeta(full bool) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeta", full)
	ret0, _ := ret[0].(any)
	return ret0
}

// GetMeta indicates an expected call of GetMeta.
func (mr *MockTxPoolAPIMockRecorder) GetMeta(full any) *TxPoolAPIGetMetaCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeta", reflect.TypeOf((*MockTxPoolAPI)(nil).GetMeta), full)
	return &TxPoolAPIGetMetaCall{Call: call}
}

// TxPoolAPIGetMetaCall wrap *gomock.Call
type TxPoolAPIGetMetaCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TxPoolAPIGetMetaCall) Return(arg0 any) *TxPoolAPIGetMetaCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TxPoolAPIGetMetaCall) Do(f func(bool) any) *TxPoolAPIGetMetaCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TxPoolAPIGetMetaCall) DoAndReturn(f func(bool) any) *TxPoolAPIGetMetaCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPendingTxCountByAccount mocks base method.
func (m *MockTxPoolAPI) GetPendingTxCountByAccount(account string) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingTxCountByAccount", account)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetPendingTxCountByAccount indicates an expected call of GetPendingTxCountByAccount.
func (mr *MockTxPoolAPIMockRecorder) GetPendingTxCountByAccount(account any) *TxPoolAPIGetPendingTxCountByAccountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingTxCountByAccount", reflect.TypeOf((*MockTxPoolAPI)(nil).GetPendingTxCountByAccount), account)
	return &TxPoolAPIGetPendingTxCountByAccountCall{Call: call}
}

// TxPoolAPIGetPendingTxCountByAccountCall wrap *gomock.Call
type TxPoolAPIGetPendingTxCountByAccountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TxPoolAPIGetPendingTxCountByAccountCall) Return(arg0 uint64) *TxPoolAPIGetPendingTxCountByAccountCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TxPoolAPIGetPendingTxCountByAccountCall) Do(f func(string) uint64) *TxPoolAPIGetPendingTxCountByAccountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TxPoolAPIGetPendingTxCountByAccountCall) DoAndReturn(f func(string) uint64) *TxPoolAPIGetPendingTxCountByAccountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTotalPendingTxCount mocks base method.
func (m *MockTxPoolAPI) GetTotalPendingTxCount() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalPendingTxCount")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetTotalPendingTxCount indicates an expected call of GetTotalPendingTxCount.
func (mr *MockTxPoolAPIMockRecorder) GetTotalPendingTxCount() *TxPoolAPIGetTotalPendingTxCountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalPendingTxCount", reflect.TypeOf((*MockTxPoolAPI)(nil).GetTotalPendingTxCount))
	return &TxPoolAPIGetTotalPendingTxCountCall{Call: call}
}

// TxPoolAPIGetTotalPendingTxCountCall wrap *gomock.Call
type TxPoolAPIGetTotalPendingTxCountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TxPoolAPIGetTotalPendingTxCountCall) Return(arg0 uint64) *TxPoolAPIGetTotalPendingTxCountCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TxPoolAPIGetTotalPendingTxCountCall) Do(f func() uint64) *TxPoolAPIGetTotalPendingTxCountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TxPoolAPIGetTotalPendingTxCountCall) DoAndReturn(f func() uint64) *TxPoolAPIGetTotalPendingTxCountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTransaction mocks base method.
func (m *MockTxPoolAPI) GetTransaction(hash *types.Hash) *types.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", hash)
	ret0, _ := ret[0].(*types.Transaction)
	return ret0
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockTxPoolAPIMockRecorder) GetTransaction(hash any) *TxPoolAPIGetTransactionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockTxPoolAPI)(nil).GetTransaction), hash)
	return &TxPoolAPIGetTransactionCall{Call: call}
}

// TxPoolAPIGetTransactionCall wrap *gomock.Call
type TxPoolAPIGetTransactionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TxPoolAPIGetTransactionCall) Return(arg0 *types.Transaction) *TxPoolAPIGetTransactionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TxPoolAPIGetTransactionCall) Do(f func(*types.Hash) *types.Transaction) *TxPoolAPIGetTransactionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TxPoolAPIGetTransactionCall) DoAndReturn(f func(*types.Hash) *types.Transaction) *TxPoolAPIGetTransactionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
