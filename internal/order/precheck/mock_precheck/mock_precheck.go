// Code generated by MockGen. DO NOT EDIT.
// Source: precheck.go

// Package mock_precheck is a generated GoMock package.
package mock_precheck

import (
	reflect "reflect"

	order "github.com/axiomesh/axiom/internal/order"
	precheck "github.com/axiomesh/axiom/internal/order/precheck"
	gomock "github.com/golang/mock/gomock"
)

// MockPreCheck is a mock of PreCheck interface.
type MockPreCheck struct {
	ctrl     *gomock.Controller
	recorder *MockPreCheckMockRecorder
}

// MockPreCheckMockRecorder is the mock recorder for MockPreCheck.
type MockPreCheckMockRecorder struct {
	mock *MockPreCheck
}

// NewMockPreCheck creates a new mock instance.
func NewMockPreCheck(ctrl *gomock.Controller) *MockPreCheck {
	mock := &MockPreCheck{ctrl: ctrl}
	mock.recorder = &MockPreCheckMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPreCheck) EXPECT() *MockPreCheckMockRecorder {
	return m.recorder
}

// CommitValidTxs mocks base method.
func (m *MockPreCheck) CommitValidTxs() chan *precheck.ValidTxs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitValidTxs")
	ret0, _ := ret[0].(chan *precheck.ValidTxs)
	return ret0
}

// CommitValidTxs indicates an expected call of CommitValidTxs.
func (mr *MockPreCheckMockRecorder) CommitValidTxs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitValidTxs", reflect.TypeOf((*MockPreCheck)(nil).CommitValidTxs))
}

// PostUncheckedTxEvent mocks base method.
func (m *MockPreCheck) PostUncheckedTxEvent(ev *order.UncheckedTxEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostUncheckedTxEvent", ev)
}

// PostUncheckedTxEvent indicates an expected call of PostUncheckedTxEvent.
func (mr *MockPreCheckMockRecorder) PostUncheckedTxEvent(ev interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostUncheckedTxEvent", reflect.TypeOf((*MockPreCheck)(nil).PostUncheckedTxEvent), ev)
}

// Start mocks base method.
func (m *MockPreCheck) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockPreCheckMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockPreCheck)(nil).Start))
}
