// Code generated by MockGen. DO NOT EDIT.
// Source: ISync.go
//
// Generated by this command:
//
//	mockgen -destination mock_sync/mock_sync.go -package mock_sync -source ISync.go
//

// Package mock_sync is a generated GoMock package.
package mock_sync

import (
	reflect "reflect"

	common "github.com/axiomesh/axiom-ledger/internal/sync/common"
	gomock "go.uber.org/mock/gomock"
)

// MockSync is a mock of Sync interface.
type MockSync struct {
	ctrl     *gomock.Controller
	recorder *MockSyncMockRecorder
}

// MockSyncMockRecorder is the mock recorder for MockSync.
type MockSyncMockRecorder struct {
	mock *MockSync
}

// NewMockSync creates a new mock instance.
func NewMockSync(ctrl *gomock.Controller) *MockSync {
	mock := &MockSync{ctrl: ctrl}
	mock.recorder = &MockSyncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSync) EXPECT() *MockSyncMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSync) ISGOMOCK() struct{} {
	return struct{}{}
}

// Commit mocks base method.
func (m *MockSync) Commit() chan any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(chan any)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockSyncMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockSync)(nil).Commit))
}

// CurrentMode mocks base method.
func (m *MockSync) CurrentMode() common.SyncMode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentMode")
	ret0, _ := ret[0].(common.SyncMode)
	return ret0
}

// CurrentMode indicates an expected call of CurrentMode.
func (mr *MockSyncMockRecorder) CurrentMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentMode", reflect.TypeOf((*MockSync)(nil).CurrentMode))
}

// GetSyncProgress mocks base method.
func (m *MockSync) GetSyncProgress() *common.SyncProgress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncProgress")
	ret0, _ := ret[0].(*common.SyncProgress)
	return ret0
}

// GetSyncProgress indicates an expected call of GetSyncProgress.
func (mr *MockSyncMockRecorder) GetSyncProgress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncProgress", reflect.TypeOf((*MockSync)(nil).GetSyncProgress))
}

// Prepare mocks base method.
func (m *MockSync) Prepare(opts ...common.Option) (*common.PrepareData, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Prepare", varargs...)
	ret0, _ := ret[0].(*common.PrepareData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare.
func (mr *MockSyncMockRecorder) Prepare(opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockSync)(nil).Prepare), opts...)
}

// Start mocks base method.
func (m *MockSync) Start(isDataSyncer func() bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", isDataSyncer)
}

// Start indicates an expected call of Start.
func (mr *MockSyncMockRecorder) Start(isDataSyncer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSync)(nil).Start), isDataSyncer)
}

// StartSync mocks base method.
func (m *MockSync) StartSync(params *common.SyncParams, syncTaskDoneCh chan error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSync", params, syncTaskDoneCh)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartSync indicates an expected call of StartSync.
func (mr *MockSyncMockRecorder) StartSync(params, syncTaskDoneCh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSync", reflect.TypeOf((*MockSync)(nil).StartSync), params, syncTaskDoneCh)
}

// Stop mocks base method.
func (m *MockSync) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockSyncMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockSync)(nil).Stop))
}

// SwitchMode mocks base method.
func (m *MockSync) SwitchMode(mode common.SyncMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwitchMode", mode)
	ret0, _ := ret[0].(error)
	return ret0
}

// SwitchMode indicates an expected call of SwitchMode.
func (mr *MockSyncMockRecorder) SwitchMode(mode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchMode", reflect.TypeOf((*MockSync)(nil).SwitchMode), mode)
}

// MockISyncConstructor is a mock of ISyncConstructor interface.
type MockISyncConstructor struct {
	ctrl     *gomock.Controller
	recorder *MockISyncConstructorMockRecorder
}

// MockISyncConstructorMockRecorder is the mock recorder for MockISyncConstructor.
type MockISyncConstructorMockRecorder struct {
	mock *MockISyncConstructor
}

// NewMockISyncConstructor creates a new mock instance.
func NewMockISyncConstructor(ctrl *gomock.Controller) *MockISyncConstructor {
	mock := &MockISyncConstructor{ctrl: ctrl}
	mock.recorder = &MockISyncConstructorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISyncConstructor) EXPECT() *MockISyncConstructorMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockISyncConstructor) ISGOMOCK() struct{} {
	return struct{}{}
}

// Commit mocks base method.
func (m *MockISyncConstructor) Commit() chan any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(chan any)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockISyncConstructorMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockISyncConstructor)(nil).Commit))
}

// Mode mocks base method.
func (m *MockISyncConstructor) Mode() common.SyncMode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mode")
	ret0, _ := ret[0].(common.SyncMode)
	return ret0
}

// Mode indicates an expected call of Mode.
func (mr *MockISyncConstructorMockRecorder) Mode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mode", reflect.TypeOf((*MockISyncConstructor)(nil).Mode))
}

// PostCommitData mocks base method.
func (m *MockISyncConstructor) PostCommitData(data []common.CommitData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostCommitData", data)
}

// PostCommitData indicates an expected call of PostCommitData.
func (mr *MockISyncConstructorMockRecorder) PostCommitData(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCommitData", reflect.TypeOf((*MockISyncConstructor)(nil).PostCommitData), data)
}

// Prepare mocks base method.
func (m *MockISyncConstructor) Prepare(config *common.Config) (*common.PrepareData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", config)
	ret0, _ := ret[0].(*common.PrepareData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare.
func (mr *MockISyncConstructorMockRecorder) Prepare(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockISyncConstructor)(nil).Prepare), config)
}

// Start mocks base method.
func (m *MockISyncConstructor) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockISyncConstructorMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockISyncConstructor)(nil).Start))
}

// Stop mocks base method.
func (m *MockISyncConstructor) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockISyncConstructorMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockISyncConstructor)(nil).Stop))
}
